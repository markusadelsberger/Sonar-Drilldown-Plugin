<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<qualitymodel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="qualitymodel.xsd">
    <versions>
        <version author="hgruber" date="2011-11-23 13:55" number="2"/>
        <version author="hgruber" date="2011-11-23 13:54" number="1"/>
    </versions>
    <descriptions>
        <descriptionannotation id="1483943197">14 more rules are assigned than in TIC:
425
675
782
812
813
828
830
831
900
960
961
1763
1902
1914
</descriptionannotation>
        <descriptionannotation id="-474108305">A lot of work is still open. Other issues besides resource usage and synchronization are currently not known. </descriptionannotation>
        <descriptionannotation id="-1633235304">Add vocabulary rules and metrics.</descriptionannotation>
        <descriptionannotation id="1160048807">Design as such is not mentioned in the subcategories as its concered with definition of all entities mentioned in the subcategories. Issues wiith designpatterns are to be clssified with their repecive grnuzlarity. Achitectureal patterns under architectural issues, class interactions under ObjectRelationship issues ....</descriptionannotation>
        <descriptionannotation id="-389696835">Form of documentation is subject to coding style issues.</descriptionannotation>
        <descriptionannotation id="-421125403">Hint: Take care that demaned requests the require resources beyon threshold are prevented. Take care to constant at max nlog runtime complexity. Even simple nested loop have inherently the potential of exponential complexitiy. Especially deeply structured systems having long callsequences need carefull checking to prevent nested loops creating exponential behaviors.</descriptionannotation>
        <descriptionannotation id="-1291379464">In some languages no separation between definition declaration.</descriptionannotation>
        <descriptionannotation id="-1757519746">Majaor issues are missing like general indentation rules, bracketing, spaces, empty lines, line breaks, the placing and layout of comments and file layout.</descriptionannotation>
        <descriptionannotation id="-1315608278">Reference to external documentation?</descriptionannotation>
        <descriptionannotation id="1789142199">Some issue groups are missing.
proposal add : 
- memory handling issues
- memory wasting (unnecc large chunks)
- reference counting
- pointerarithmetic
- superflous references
- caching issues
- memory thrashing
- memory fragmentation
</descriptionannotation>
        <descriptionannotation id="-843123095">Still to be done. Currently we have no examples. Ideas are MISRA rules ....</descriptionannotation>
        <descriptionannotation id="890608707">template issues i.e wrong instantiation not covered</descriptionannotation>
        <descriptionannotation id="-182450643">the taxa superflous definitions and declarations seem to be missing. They are listed at 7. correctness issues. Reason is that usually extern knowledge with respect to requirements is necessary to determine that something is unnecessary. Even if unused now, it may be under construction.</descriptionannotation>
        <descriptionannotation id="-800332267">The whole category needs restructuring and needs to be filled up with meaningful rules (Stylechecker, Codeinspector)</descriptionannotation>
        <descriptionannotation id="-127153706">This group needs reordering to follow the simplicity gradient principle.
1. Return values
2. Errorhandling
3. Exception handling
4. Initialization
5. Threading issues
6. Technology spec. protocol issues
</descriptionannotation>
        <descriptionannotation id="572789604">This includes recompilation and changes of the software as software is meant to be changed.</descriptionannotation>
        <descriptionexample id="-879920824">Bad example: 

public bool Active {
    get {
        return active;
    }
    // this can take a long time to figure out if the default value for active
    // is false (since most people will use the property to set it to true)
    set {
        active = true;
    }
}</descriptionexample>
        <descriptionexample id="761084720">class Foo {
	private StringBuffer memoryLeak;
}</descriptionexample>
        <descriptionexample id="934696085">public class abstract Example {
  String field;
  int otherField;
}</descriptionexample>
        <descriptionexample id="-714170688">public class Example
{
  // Not a good idea...
  public int []badBehavior()
  {
    // ...
    return null;
  }

  // Good behavior
  public String[] bonnePratique()
  {
    //...
    return new String[0];
  }
}</descriptionexample>
        <descriptionexample id="16969959">public class Foo {
    public void bar() {
        // NEVER DO THIS IN A APP SERVER !!!
        System.exit(0);
    }
}</descriptionexample>
        <descriptionexample id="658769007">public class Foo {  //Should be final
    private Foo() { }
}</descriptionexample>
        <descriptionexample id="410002923">public class GCCall
{
  public GCCall()
  {
    // Explicit gc call !
    System.gc();
  }
  public void doSomething()
  {
     // Explicit gc call !
     Runtime.getRuntime().gc();
  }

public explicitGCcall() { // Explicit gc call ! System.gc(); }

public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); } }
</descriptionexample>
        <descriptionexample id="-839346987">public class ThrDeux {
  private volatile String var;

}</descriptionexample>
        <descriptionexample id="636384358">public class UsingShort
{
  private short doNotUseShort = 0;

  public UsingShort() {
    short shouldNotBeUsed = 1;
    doNotUseShort += shouldNotBeUsed;
  }
}</descriptionexample>
        <descriptionjustification id="568627708">A class that is coupled with many other classes is inherently complex (and thus not simple) as not only the class itself has to be understood but also to some extent the coupled classes.</descriptionjustification>
        <descriptionjustification id="200554298">A misplaced default label makes reading the code more difficult as the entire switch statement has to be scanned systematically for the missing default label.</descriptionjustification>
        <descriptionjustification id="713498784">A return from a catch block has to be considered similar to an unhandled exception. This might therefore lead to faults as possible states are not considered that require attention and special action, e.g., shutdown of the system or standby operation.</descriptionjustification>
        <descriptionjustification id="129061774">An empty finalizer method indicates that systematic release of resources is not an established practice.</descriptionjustification>
        <descriptionjustification id="-1167214100">An empty if-statement makes source code more incomprehensible.</descriptionjustification>
        <descriptionjustification id="1944159571">Catching exceptions on the throwable level might lead to unhandled exceptions of type error, i.e., typically critical exceptions that might lead to stability problems.</descriptionjustification>
        <descriptionjustification id="975684155">Code smells are often tool specific, and surely special issues.</descriptionjustification>
        <descriptionjustification id="1182875413">Conversion will not work correctly.</descriptionjustification>
        <descriptionjustification id="1262594481">Correct execution relies on the correct order of commands.</descriptionjustification>
        <descriptionjustification id="-1526217090">Deeply nested if-statements are difficult to change, as effects of changes are difficult to understand due to the deep nesting level.</descriptionjustification>
        <descriptionjustification id="-1978456458">Deeply nested if-statements are difficult to test as the number of test cases to consider is quite high (in order to achieve high or total coverage).</descriptionjustification>
        <descriptionjustification id="661417969">Documentation is part of text of the source code and as such not a functional part of the program. It is last as it is complex and requires some external information.</descriptionjustification>
        <descriptionjustification id="1132597664">Empty if-statement are not necessary so the code could be written more simple.</descriptionjustification>
        <descriptionjustification id="681911234">Empty loop statements indicate that the source code has not yet been tested or reviewed as this is an obvious deficiency indicating low maturity of the source code.</descriptionjustification>
        <descriptionjustification id="1444999152">Following this rule makes the code more readable as abstract classes can be distinguished from classes by means of the class name.</descriptionjustification>
        <descriptionjustification id="-1635658881">Here we need more external information but we are still on the coding level. </descriptionjustification>
        <descriptionjustification id="-37638088">How to layout the text and which conventions are to be followed are next steps to be considered before coding.</descriptionjustification>
        <descriptionjustification id="-1770364448">How to write the source code as text is the most basic convention for source code.</descriptionjustification>
        <descriptionjustification id="772993762">It should never be necessary to call this exception.</descriptionjustification>
        <descriptionjustification id="313337929">It's usual style to place the default label of a switch statement as last statement in a switch clause.</descriptionjustification>
        <descriptionjustification id="2076468404">Literals should always be formulated as constants, at least when they are used several times. Neglecting this rule is an indicator that the programmers are not aware of principle java programming practices.</descriptionjustification>
        <descriptionjustification id="-918814715">Next to naming and typing the most simple to check are procedural statements issues. These determine the procedural flow of the programs execution.</descriptionjustification>
        <descriptionjustification id="-860915999">Next to procedural statements which define what the program is doing, it is necessary to check how the data is stored and maintained in memory.</descriptionjustification>
        <descriptionjustification id="-1203514885">Next to the names types (more or less specific) are to be determined for the names.</descriptionjustification>
        <descriptionjustification id="-842353121">Objects should usually be compared by using equals().</descriptionjustification>
        <descriptionjustification id="679969553">Proper names for project, filenames, classes, variables ... are the starting points for creating source code.</descriptionjustification>
        <descriptionjustification id="1520667698">Resource is the most simple of the timing issues.</descriptionjustification>
        <descriptionjustification id="-306099803">Simplicity is closely related to complexity. Thus, a metric that deals with the complexity of a method is also related to simplicity.</descriptionjustification>
        <descriptionjustification id="-1668571537">Such constructs can lead to faults as the state of the object possibly is not yet properly initialized - a fact the used inherited method typically relies upon.</descriptionjustification>
        <descriptionjustification id="-138405719">Such constructs can lead to stability problems as the state of the object possibly is not yet properly initialized - a fact the used inherited method typically relies upon.</descriptionjustification>
        <descriptionjustification id="-858267321">Synchronization issues are more complex than resource issues as system wide solutions have to be found taking application domain knowledge into account.</descriptionjustification>
        <descriptionjustification id="1670412501">The code will always create an exception.</descriptionjustification>
        <descriptionjustification id="-990720872">The complexity of a method has a direct impact on its changeability, as changing a complex class in a correct way is only possibly if all possible states and their interrelations of a method are well understood.</descriptionjustification>
        <descriptionjustification id="-2080264386">The correct boolean value can be returned more simply by evaluating a boolean expression directly in the return statement.                                                                                                                                                                                                                                                                                                                  </descriptionjustification>
        <descriptionjustification id="-1964076294">The declaration is useless without implementing the interface methods.</descriptionjustification>
        <descriptionjustification id="307542231">The Dollar sign can be used in principle, nevertheless it is also used by the java compiler to mark inner classes. It is therefore bad style to use it as part of an ordinary type name.</descriptionjustification>
        <descriptionjustification id="-1509729738">The intention of an empty while-statements can typically be implemented better.</descriptionjustification>
        <descriptionjustification id="1605305163">The more complex a method is the more difficult it is to derive test cases in a systematic case as the number of states to be considered as well as the number of statements / branches to be tested is large.</descriptionjustification>
        <descriptionjustification id="96290665">The sequence is from the general to the more and more special.</descriptionjustification>
        <descriptionjustification id="-1387457857">The usage of a resource is not terminated properly.</descriptionjustification>
        <descriptionjustification id="-500884461">There is a high probability that the programmer indented something else erroneously.</descriptionjustification>
        <descriptionjustification id="589798460">This attribute is important for the analysis itself as well as quality model maintenance. </descriptionjustification>
        <descriptionjustification id="1002578817">This call makes it hard or impossible to reuse this code by other code.</descriptionjustification>
        <descriptionjustification id="336159016">This category of unassigned measures is necessary for tool supported analysis. Unassigned measures otherwise will not show up.</descriptionjustification>
        <descriptionjustification id="-777184646">This category requires a formal specification of functional requirements. Therefore coverage will stay very limited as only tiny bits of formal specifications are available or derivable.</descriptionjustification>
        <descriptionjustification id="1441601123">This construct is very dangerous.</descriptionjustification>
        <descriptionjustification id="-447728438">This is an important "special issue" since tool configuration problems may lead to wrong findings.</descriptionjustification>
        <descriptionjustification id="2025719444">This is concerned with programming in the large. External information for structuring the system is necessary.</descriptionjustification>
        <descriptionjustification id="1463669781">This method should not be called directly.</descriptionjustification>
        <descriptionjustification id="-395084914">This naming is confusing.</descriptionjustification>
        <descriptionjustification id="611056127">This naming is misleading.</descriptionjustification>
        <descriptionjustification id="1191187470">This operation may lead to a different result as expected.</descriptionjustification>
        <descriptionjustification id="179425173">This shuts down the entire Java virtual machine.</descriptionjustification>
        <descriptionjustification id="1802552039">Timing issues are even more complex than correctness issues.</descriptionjustification>
        <descriptionjustification id="352839176">Unassigned measures is a necessary for SPQR analysis. Unassigned measures otherwise will not show up.</descriptionjustification>
        <descriptionjustification id="-549859193">Unnecessary instance created.</descriptionjustification>
        <descriptionjustification id="-1150400626">Untypical usage of for loops  makes reading the source code more difficult - compared to reasonably used while or for loops.</descriptionjustification>
        <descriptionjustification id="1684455800">Using interfaces instead of implementation classes for specifying the type of a variable enhances the changeability, as the implementation of an interface can be exchanged more easily.</descriptionjustification>
        <descriptionjustification id="715407962">Using literals in expressions make changes more complicated, as all literals have to be changed consistently throughout the entire source code.</descriptionjustification>
        <descriptionquotation id="1140998653">05 DatenkapselAufbruch</descriptionquotation>
        <descriptionquotation id="-905272226">AM: Creates an empty jar file entry</descriptionquotation>
        <descriptionquotation id="1189661576">AM: Creates an empty zip file entry </descriptionquotation>
        <descriptionquotation id="878848189">BC: Impossible cast </descriptionquotation>
        <descriptionquotation id="64588093">BC: instanceof will always return false </descriptionquotation>
        <descriptionquotation id="1262453362">BC: instanceof will always return true </descriptionquotation>
        <descriptionquotation id="-1652381569">BC: Unchecked/unconfirmed cast </descriptionquotation>
        <descriptionquotation id="-927375626">CN: Class implements Cloneable but does not define or use clone method </descriptionquotation>
        <descriptionquotation id="-132288946">CN: clone method does not call super.clone() </descriptionquotation>
        <descriptionquotation id="-934468163">Combination of ISO 9126 and SEI</descriptionquotation>
        <descriptionquotation id="198486916">DB: Method uses the same code for two branches </descriptionquotation>
        <descriptionquotation id="-22070190">DC: Possible double check of field </descriptionquotation>
        <descriptionquotation id="-2076258401">DLS: Overwritten increment </descriptionquotation>
        <descriptionquotation id="-260335594">Dm: A thread was created using the default empty run method </descriptionquotation>
        <descriptionquotation id="502898217">Dm: Explicit garbage collection; extremely dubious except in benchmarking code </descriptionquotation>
        <descriptionquotation id="-1270179189">Dm: Method allocates a boxed primitive just to call toString </descriptionquotation>
        <descriptionquotation id="1140336003">Dm: Method allocates an object, only to get the class object </descriptionquotation>
        <descriptionquotation id="-1736088707">Dm: Method invokes dubious Boolean constructor; use Boolean.valueOf(...) instead </descriptionquotation>
        <descriptionquotation id="-1865468156">Dm: Method invokes dubious new String() constructor; just use "" </descriptionquotation>
        <descriptionquotation id="-1184823833">Dm: Method invokes dubious new String(String) constructor; just use the argument </descriptionquotation>
        <descriptionquotation id="1241702359">Dm: Method invokes dubious String.equals(""); use String.length() == 0 instead </descriptionquotation>
        <descriptionquotation id="-167215300">Dm: Method invokes runFinalizersOnExit, one of the most dangerous methods in the Java libraries</descriptionquotation>
        <descriptionquotation id="-1849555515">Dm: Method invokes System.exit(...) </descriptionquotation>
        <descriptionquotation id="121337960">Dm: Method invokes toString() method on a String; just use the String </descriptionquotation>
        <descriptionquotation id="-791722424">Dm: Monitor wait() called on Condition</descriptionquotation>
        <descriptionquotation id="-2045760181">EC: Call to equals() with null argument </descriptionquotation>
        <descriptionquotation id="723698710">EC: Invocation of equals() on an array, which is equivalent to == </descriptionquotation>
        <descriptionquotation id="264148690">EI: Method may expose internal representation by returning reference to mutable object </descriptionquotation>
        <descriptionquotation id="366614806">ES: Comparison of String objects using == or != </descriptionquotation>
        <descriptionquotation id="19207526">ESync: Empty synchronized block </descriptionquotation>
        <descriptionquotation id="-2144737174">FE: Test for floating point equality.</descriptionquotation>
        <descriptionquotation id="1202852648">FI: Explicit invocation of finalizer </descriptionquotation>
        <descriptionquotation id="-1981267796">FI: Finalizer does not call superclass finalizer </descriptionquotation>
        <descriptionquotation id="-595890426">Following ISO 9126</descriptionquotation>
        <descriptionquotation id="478115212">Following SATC</descriptionquotation>
        <descriptionquotation id="67260070">FURPS</descriptionquotation>
        <descriptionquotation id="-738685781">HE: Class defines equals() but not hashCode() </descriptionquotation>
        <descriptionquotation id="-175236637">HE: Class defines hashCode() but not equals() </descriptionquotation>
        <descriptionquotation id="-460909071">IC: Initialization circularity </descriptionquotation>
        <descriptionquotation id="1287103455">IL: A container is added to itself. </descriptionquotation>
        <descriptionquotation id="608815917">IL: An apparent infinite recursive loop.</descriptionquotation>
        <descriptionquotation id="958783783">IMSE: Dubious catching of IllegalMonitorStateException </descriptionquotation>
        <descriptionquotation id="1506560898">IP: A parameter is dead upon entry to a method but overwritten </descriptionquotation>
        <descriptionquotation id="686334580">ISC: Needless instantiation of class that only supplies static methods </descriptionquotation>
        <descriptionquotation id="1317499447">ISO 9126</descriptionquotation>
        <descriptionquotation id="-1562640255">LI: Incorrect lazy initialization of static field </descriptionquotation>
        <descriptionquotation id="-826595812">MF: Class defines field that obscures a superclass field </descriptionquotation>
        <descriptionquotation id="1800640827">MF: Method defines a variable that obscures a field </descriptionquotation>
        <descriptionquotation id="-74370332">MS: Field is a mutable array </descriptionquotation>
        <descriptionquotation id="-1176212419">MS: Field is a mutable Hashtable </descriptionquotation>
        <descriptionquotation id="1967493530">MS: Field isn't final but should be </descriptionquotation>
        <descriptionquotation id="1521946364">MS: Field should be both final and package protected </descriptionquotation>
        <descriptionquotation id="1740614085">MS: Public static method may expose internal representation by returning array </descriptionquotation>
        <descriptionquotation id="1311305727">Nm: Class is not derived from an Exception, even though it is named as such </descriptionquotation>
        <descriptionquotation id="1252152775">Nm: Class names should start with an upper case letter </descriptionquotation>
        <descriptionquotation id="-1192445494">Nm: Field names should start with an lower case letter </descriptionquotation>
        <descriptionquotation id="-663576613">Nm: Method names should start with an lower case letter </descriptionquotation>
        <descriptionquotation id="-83013454">Nm: Very confusing method names </descriptionquotation>
        <descriptionquotation id="1891377549">No: Using notify() rather than notifyAll() in method </descriptionquotation>
        <descriptionquotation id="1101334788">NP: Immediate dereference of the result of readLine() </descriptionquotation>
        <descriptionquotation id="1903339485">NP: Method call passes null for unconditionally dereferenced parameter </descriptionquotation>
        <descriptionquotation id="286046926">NP: Null pointer dereference in method </descriptionquotation>
        <descriptionquotation id="-1610159493">NP: Read of field not initialized in constructor </descriptionquotation>
        <descriptionquotation id="1358334607">NP: Read of unwritten field </descriptionquotation>
        <descriptionquotation id="1675807439">ODR: Method may fail to close database resource </descriptionquotation>
        <descriptionquotation id="640741411">ODR: Method may fail to close database resource on exception </descriptionquotation>
        <descriptionquotation id="728226693">OS: Method may fail to close stream </descriptionquotation>
        <descriptionquotation id="-283953363">OS: Method may fail to close stream on exception </descriptionquotation>
        <descriptionquotation id="1652065330">RE: Invalid syntax for regular expression </descriptionquotation>
        <descriptionquotation id="-800324509">REC: java.lang.Exception is caught when Exception is not thrown </descriptionquotation>
        <descriptionquotation id="1492159198">RR: Method ignores results of InputStream.read() </descriptionquotation>
        <descriptionquotation id="-610182357">RR: Method ignores results of InputStream.skip()</descriptionquotation>
        <descriptionquotation id="-153452210">RS: Class's readObject() method is synchronized </descriptionquotation>
        <descriptionquotation id="-1005764816">Ru: Invokes run on a thread (did you mean to start it instead?) </descriptionquotation>
        <descriptionquotation id="364971208">RV: Method discards result of readLine after checking if it is nonnull </descriptionquotation>
        <descriptionquotation id="-1982858165">RV: Method ignores return value </descriptionquotation>
        <descriptionquotation id="-1794626183">SBSC: Method concatenates strings using + in a loop </descriptionquotation>
        <descriptionquotation id="-755960875">Se: serialVersionUID isn't final </descriptionquotation>
        <descriptionquotation id="1291142759">Se: serialVersionUID isn't static </descriptionquotation>
        <descriptionquotation id="81975">SEI</descriptionquotation>
        <descriptionquotation id="779060817">SF: Switch statement found where one case falls thru to the next case </descriptionquotation>
        <descriptionquotation id="2045076886">SI: Static initializer for class creates instance before all static final fields assigned </descriptionquotation>
        <descriptionquotation id="180070617">SnVI: Class is Serializable, but doesn't define serialVersionUID </descriptionquotation>
        <descriptionquotation id="-1022246396">SS: Unread field: should this field be static?</descriptionquotation>
        <descriptionquotation id="-2013135941">SW: Certain swing methods should only be invoked from the Swing event thread </descriptionquotation>
        <descriptionquotation id="-78888993">SWL: Method calls Thread.sleep() with a lock held </descriptionquotation>
        <descriptionquotation id="1478429465">TodoComment</descriptionquotation>
        <descriptionquotation id="2016907221">UCF: Useless control flow in method </descriptionquotation>
        <descriptionquotation id="-1552725703">UL: Method does not release lock on all exception paths </descriptionquotation>
        <descriptionquotation id="-224275165">UPM: Private method is never called </descriptionquotation>
        <descriptionquotation id="-1229008344">UrF: Unread field </descriptionquotation>
        <descriptionquotation id="343961636">UuF: Unused field </descriptionquotation>
        <descriptionquotation id="-1101379916">UW: Unconditional wait in method </descriptionquotation>
        <descriptionquotation id="1918112045">Wa: Wait not in loop in method </descriptionquotation>
        <descriptionrelation id="-956344054">
            </descriptionrelation>
        <descriptionrelation id="140038687">Homogeneously layout text is easier to read.</descriptionrelation>
        <descriptionrelation id="-1310256143">One to one relationship.</descriptionrelation>
        <descriptionrelation id="-277638589">UM contains 14 more rules, 9.5.4 MISRA rules moved to 9.4.1.</descriptionrelation>
    </descriptions>
    <tools>
        <tool homepage="http://checkstyle.sourceforge.net/" name="Checkstyle">
            <description>Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard.</description>
        </tool>
        <tool homepage="http://findbugs.sourcefourge.net" name="FindBugs">
            <description>FindBugs uses static analysis to inspect Java bytecode for occurrences of bug patterns.</description>
        </tool>
        <tool homepage="http://pmd.sourceforge.net" name="PMD">
            <description>PMD scans Java source code and looks for potential problems like 
possible bugs (empty try/catch/finally/switch statements), dead code (unused local variables), parameters and private methods, suboptimal code (wasteful String/StringBuffer usage).
Overcomplicated expressions - unnecessary if statements, for loops that could be while loops
Duplicate code - copied/pasted code means copied/pasted bugs
</description>
        </tool>
    </tools>
    <languages>
        <language name="Java"/>
    </languages>
    <entities/>
    <entityhierarchy/>
    <domains>
        <domainaspectsubtype>
            <value name="Aspect"/>
            <value name="Technical%20Issue"/>
            <value name="Requirement"/>
            <value name="Goal"/>
        </domainaspectsubtype>
        <domaincoverage>
            <description>Documents how completely  the issues of the quality attribute are treated by the assigned attributes or metrics. As  metrics are language or platform dependent there is an estimation for each.</description>
            <value name="very%20low">There are hardly any items to cover the current quality attribute so it cannot be used for an assessment.</value>
            <value name="low">Some items (metrics, quality attributes) are available but not sufficient for useful assessment.</value>
            <value name="medium">There is a minimum of items (metrics, quality attributes) to make this quality attribute applicable for an assessment.</value>
            <value name="high">Most issues are covered but further items (metrics, quality attributes) can help for completion.</value>
            <value name="very%20high">All issues of the quality attribute are fully covered, no further items are necessary.</value>
        </domaincoverage>
        <domaineffort>
            <description>How much effort it is to spent to remove the defect (qualitatively).</description>
            <value name="low">Local, some lines in a file.</value>
            <value name="medium">Module wide changes.</value>
            <value name="high">System wide changes.</value>
        </domaineffort>
        <domainignorerating>
            <description>Tells which values of "Rating" shall be ignored for calculating an average rating.</description>
            <value name="not%20possible"/>
        </domainignorerating>
        <domainimportance>
            <description>Defines the relevance of the current item (metric, quality attribute) for the quality attribute it is assigned to.</description>
            <value name="low">This item has to be kept in mind to assure good quality in the long run.</value>
            <value name="medium">Improving this item contributes to good quality.</value>
            <value name="high">Striving for excellency for this item highly and directly contributes to good quality.</value>
            <value name="very%20high">It is inevitable to fix this item in order to ensure good quality. Especially for metrics this indicates potential faults.</value>
        </domainimportance>
        <domainkmviolation>
            <description>Tells which values of "Rating" will cause a Key Metric violation.</description>
            <value name="very%20critical"/>
            <value name="critical"/>
        </domainkmviolation>
        <domainrating>
            <description>For rating metrics or categories based on results found.</description>
            <value name="not%20possible">Rating is not possible because additional information is needed.</value>
            <value name="very%20good">Fully conforms to goals.</value>
            <value name="ok">There are some shortcomings, fixing not required.</value>
            <value name="critical">Negative effect on quality, should be fixed.</value>
            <value name="very%20critical">Considerable negative effect, has to be fixed.</value>
        </domainrating>
        <domaintrustworthiness>
            <description>How reliable is the detection of a finding.</description>
            <value name="very%20low">There is too much over- and/or underdetection to rely to the results.</value>
            <value name="low">There is singnificant underdetection.</value>
            <value name="medium">Most issues are found but there is overdetection.</value>
            <value name="high">Almost no over- and under detection. Very reliable findings.</value>
            <value name="very%20high">No known over- or underdetection. Absolutely reliable findings.</value>
        </domaintrustworthiness>
    </domains>
    <qualityelements>
        <model full="Quality Model" name="QM" subtype="Aspect">
            <description>In accordance with the quality model defined by the ISO 9126 standard [ISO 9126], the EMISQ Quality Model distinguishes 5 different quality attributes on the top level. Each quality attribute may consist of a set of sub-quality attributes. Sub-quality attributes must not be refined.</description>
            <base name="QM - Quality Model" version="37"/>
        </model>
        <model full="Technical Issue Classification" name="TIC" subtype="Technical%20Issue">
            <description>The problem classification of coding issues is intended to communicate with software experts, such as architects or chief programmers.

It is structured from the atomic, most simple artifacts to the more complex. Additionally the amount information to be taken into account is used to determine the sequence of classification items. Consequently the sequence is ordered from the simple to understand to the more complex (simplicity gradient principle). 

The problem classification is not structured by impact or importance. Simpler issues for example wrong reference can lead to instant system stop having as or even more severe impact more complex issues.

This way the reader is guided into more and more complex matters having the most benefit with the least mental effort in the beginning.
</description>
            <base name="TIC - Technical Issue Classification" version="37"/>
        </model>
        <aspect full="Notation issues" name="1.">
            <description>Software source code should be as easily comprehensible as possible to require the least ressouces for understanding and maintaining. Notation issues are concerned about how the source code is written as text, like what names are used, lengths of lines, indentation, inline documentation and reference to external documentation etc.

There are many ways to denote equivalent functionality with a given programming language. There are outdated functions or constructs that are considered insecure with respect to the application domain. All these issues are usually not defined by programming languages and do not lead to system failures as such. They are classified as violation of programming styles and conventions.</description>
        </aspect>
        <aspect full="Naming conventions" name="1.1">
            <description>Naming conventions support the understandability of software sources. They suggest the usage and the functionality of the termed (labeled) entity such as systems, subsystems, packages, modules, classes, variables, methods and constants.

They support traceability of technical and functional requirements, as preferably described in requirement and design documentation.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-1633235304"/>
            </annotations>
        </aspect>
        <aspect full="General naming conventions" name="1.1.1"/>
        <aspect full="Class names" name="1.1.2"/>
        <aspect full="Method names" name="1.1.3"/>
        <aspect full="Field names" name="1.1.4"/>
        <aspect full="Specific naming conventions" name="1.1.5"/>
        <aspect full="Coding style issues" name="1.2">
            <description>Coding styles are concerned with conventions, which are specific to programming language, application domain, or project. 

They define a subset of the programming language to be used for the specific project.

Programming languages have redundant constructs and allow for manifold formatting. By restricting this due to coding conventions maintainability of a program is (greatly) improved.

Certain constructs of a programming language are considered unsafe in a specific application domain and therefore banned by convention. This is meant to improve resource usage and timing of the system.</description>
        </aspect>
        <aspect full="Layout conventions" name="1.2.1">
            <description>Layout conventions of source code are set to improve the readability. They comprise of line lengths, indentation, spacing, placement of brackets.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-1757519746"/>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-800332267"/>
            </annotations>
        </aspect>
        <aspect full="Language constructs conventions" name="1.2.2"/>
        <aspect full="Library conventions" name="1.2.3"/>
        <aspect full="Domain conventions" name="1.2.4"/>
        <aspect full="Project conventions" name="1.2.5"/>
        <aspect full="Documentation issues" name="1.3">
            <description>Documentation is intended to improve understandability by adding information that cannot be derived from the code easily. 

It should be relevant with respect to the functionality and the usage of the described item. 
Preferably it aids maintainability by containing versioning and copyright information.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-389696835"/>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-1315608278"/>
            </annotations>
        </aspect>
        <aspect full="Declaration and definition issues" name="2.">
            <description>In strong typed programming languages, all identifiers have to be associated with the type fitting best to its application context. A type is properly chosen, when usage errors are avoided, type casts are not necessary, and resource efficient binary code is generated.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-1291379464"/>
                <annotation author="hgruber" date="2006-01-18" descriptionid="-182450643"/>
            </annotations>
        </aspect>
        <aspect full="Inappropriate declarations and definitions" name="2.1"/>
        <aspect full="Scope" name="2.1.1"/>
        <aspect full="Modifiers" name="2.1.2"/>
        <aspect full="Redeclaration and Redefinition" name="2.1.3"/>
        <aspect full="Inappropriate Types" name="2.1.4"/>
        <aspect full="Generics" name="2.1.5"/>
        <aspect full="Other declaration and definition issues" name="2.1.6"/>
        <aspect full="Ambiguity" name="2.2"/>
        <aspect full="Missing declarations and definitions" name="2.3"/>
        <aspect full="Style Guide" name="2.4"/>
        <aspect full="Initialization Issues" name="2.5"/>
        <aspect full="Procedural issues" name="3.">
            <description>As a rule source consists of a (approximately) minimal and comprehensible sequence of statements to fulfill functional and non functional requirements. Named and typed entities should be used consistently.</description>
        </aspect>
        <aspect full="Loops" name="3.1"/>
        <aspect full="Selections" name="3.2"/>
        <aspect full="Boolean expressions" name="3.3"/>
        <aspect full="Arithmetic expressions" name="3.4"/>
        <aspect full="Operators" name="3.5"/>
        <aspect full="Function calling and method invocation" name="3.6"/>
        <aspect full="Type conversion" name="3.7"/>
        <aspect full="Pointer and References" name="3.7.1"/>
        <aspect full="Numerical conversions" name="3.7.2"/>
        <aspect full="Structural conversion" name="3.7.3"/>
        <aspect full="Complex statements" name="3.8"/>
        <aspect full="Nesting and excessive length" name="3.9"/>
        <aspect full="Memory issues" name="4.">
            <description>The current state of a software system should be stored using a minimal amount of storage. The content of the storage should be maintained consistently.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-18" descriptionid="1789142199"/>
            </annotations>
        </aspect>
        <aspect full="Wrong and invalid references" name="4.1"/>
        <aspect full="Out-of-bounds access" name="4.2"/>
        <aspect full="Allocation" name="4.3"/>
        <aspect full="Deallocation" name="4.4"/>
        <aspect full="Memory leaks" name="4.5"/>
        <aspect full="Memory wasting" name="4.6"/>
        <aspect full="Pointer arithmetic" name="4.7"/>
        <aspect full="Protocol issues" name="5.">
            <description>The program keeps its state consistent to the relevant system environment. Therefore protocols are defined, which comprise of call sequences triggered by specific states or input. This becomes even more important in case of error handling, usage of concurrency and usage of external resources.
</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="-127153706"/>
            </annotations>
        </aspect>
        <aspect full="Exception handling" name="5.1"/>
        <aspect full="Missing or inappropriate initialization of variables" name="5.2"/>
        <aspect full="Missing initialization" name="5.2.1"/>
        <aspect full="Inadequate initialization values" name="5.2.2"/>
        <aspect full="Initialization sequence issues" name="5.2.3"/>
        <aspect full="Initialization side effect issues" name="5.2.4"/>
        <aspect full="Other initialization issues" name="5.2.5"/>
        <aspect full="Return values" name="5.3"/>
        <aspect full="Concurrency" name="5.4"/>
        <aspect full="Termination" name="5.5">
            <description>Aspects which deal with termination calls, and correct program exit.</description>
        </aspect>
        <aspect full="Operation" name="5.6"/>
        <aspect full="Technology Specific Protocol Issues" name="5.7"/>
        <aspect full="Design- and Architectural issues" name="6.">
            <description>Large scale software systems need to be tractable and understandable to be created cost effectively. 

As each person involved in creation and maintaining of systems can take into account only a relatively small system, a large system has to be divided into small tractable subsystems. But the number of subsystem which is to be considered in for a subsystem needs to be small as well. Therefore it is necessary to divide a large system into a small amount of subsystem with an equally small amount of relationships.

To obtain subsystems with tractable sizes, this partition should be done in several steps creating a hierarchical decomposition. To keep the number of relationships between these subsystems low additional restrictions for allowable relationships between subsystems are required.

The 7+-2 rule is considered helpful to determine tractable amounts. 

Such a system structure promises benefits for testing, deployment and maintenance.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="1160048807"/>
            </annotations>
        </aspect>
        <aspect full="OOP issues" name="6.1"/>
        <aspect full="Dynamic Binding issues" name="6.1.1"/>
        <aspect full="Constructor/destructor issues" name="6.1.2"/>
        <aspect full="Inheritance issues" name="6.1.3"/>
        <aspect full="Information Hiding issues" name="6.1.4"/>
        <aspect full="Operator issues" name="6.1.5"/>
        <aspect full="Assignment operator issues" name="6.1.5.1"/>
        <aspect full="New operator issues" name="6.1.5.2"/>
        <aspect full="Increment operator issues" name="6.1.5.3"/>
        <aspect full="Conversion Operator issues" name="6.1.5.4"/>
        <aspect full="Other operator issues" name="6.1.5.5"/>
        <aspect full="Complex Classes" name="6.1.6"/>
        <aspect full="Object Relationship issues" name="6.2"/>
        <aspect full="Module/package issues" name="6.3"/>
        <aspect full="Correctness issues" name="7.">
            <description>The software system is correctly implemented with respect to its explicit and implicit requirements. The issues of this category are concerned with sound code, as such that is functionally wrong with respect to its requirements.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="890608707"/>
            </annotations>
        </aspect>
        <aspect full="Functional questionable" name="7.1"/>
        <aspect full="Programming errors" name="7.2"/>
        <aspect full="Unnecessary expressions" name="7.3"/>
        <aspect full="Unnecessary definitions" name="7.4"/>
        <aspect full="Unnecessary code blocks" name="7.5"/>
        <aspect full="Redundant includes" name="7.6"/>
        <aspect full="Timing issues" name="8.">
            <description>Software systems have to meet timing constraints as well as functional requirements. These range from the general (mostly implicit) requirement to have "acceptable" response time to hard real-time, especially systems with multiple flows of control (fibers, threads, processes, multi core processors, blade servers or distributed systems). Besides mere resource usage, issues like synchronization and load balancing have to be considered to meet time constraints.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="-474108305"/>
            </annotations>
        </aspect>
        <aspect full="Resource issues" name="8.1">
            <description>To meet timing constraints resources have to be used very carefully and workload has to be well balanced in case several processing units are available. The natural way is to program exponentially, which inherently creates a threshold beyond with resources become almost instantly exhausted.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="-421125403"/>
            </annotations>
        </aspect>
        <aspect full="Synchronization issues" name="8.2">
            <description>Multiple control flow sharing resources need synchronization to have defined (deterministic) behavior. Live lock deadlocks, race condition or starvation are to be prevented by correct synchronization while retaining a maximum of concurrency.</description>
        </aspect>
        <aspect full="Special issues" name="9.">
            <description>The previous categories are concerned with general topics, which affect every software system, independent of used platform and its application domain. This class covers platform domain and project specific issues. Further issues concerning the code analysis tools are also collected under this category.</description>
        </aspect>
        <aspect full="Platform issues" name="9.1">
            <description>Platforms contain the technology to create software systems. This raises technology specific issues to be dealt with. Some examples are preprocessors, code generators, databases, middleware, GUI frameworks and libraries. 

Additionally, issues concerning multiple platforms fall into this category.</description>
        </aspect>
        <aspect full="Portability concerns" name="9.1.1"/>
        <aspect full="Preprocessing issues" name="9.1.2"/>
        <aspect full="Library usage issues" name="9.1.3"/>
        <aspect full="Domain issues" name="9.2">
            <description>Application domain may require special issues which go beyond the general taxa.</description>
            <annotations>
                <annotation author="hgruber" date="2006-01-26" descriptionid="-843123095"/>
            </annotations>
        </aspect>
        <aspect full="Project issues" name="9.3">
            <description>Particular phases in projects may require special checks to assure correct use of platform. To support code improvement or refactoring additional metrics and rules are checked.</description>
        </aspect>
        <aspect full="Developer checks" name="9.3.1">
            <description>Specific project related checks.</description>
        </aspect>
        <aspect full="Project Size" name="9.3.2">
            <description>Here we collect metrics which determine the size of the project.</description>
            <optioncoverage value="high"/>
            <optioncoverage extra="Java" value="high"/>
            <optionimportance extra="9.3" value="high"/>
        </aspect>
        <aspect full="Code analyzer issues" name="9.4">
            <description>Code analyzers need configuration take project specific settings into account. Wrong parameter are signalled by the code analyzers. These messages need to be checked to ensure proper results. Additionally analysability is a quality metric sometimes required.

Often code analyzers check special code fragments. Which is a useful feature, but rises quite fuzzy issues, which cannot be assigned without further investigation.</description>
        </aspect>
        <aspect full="Technical issues Code analyzer" name="9.4.1">
            <description>Code analyzer specifics, e.g. rules checking for quality standards, are summed up here.</description>
        </aspect>
        <aspect full="Code smells" name="9.4.2">
            <description>"Things" without a real name or notation; just "smells".</description>
        </aspect>
        <aspect full="Prelude policy" name="9.4.3">
            <description>Messages that tend to indicate tool configuration problems.</description>
        </aspect>
        <aspect full="Code analyzer errors" name="9.4.4">
            <description>This category is for code analyzer error messages.</description>
        </aspect>
        <aspect full="Unassigned measures" name="9.5.4">
            <description>This category is meant for measures that are currently unassinged to other categories (e.g. new tool rules that have to be categorized in the future).</description>
        </aspect>
        <aspect full="Adaptability" name="ADAPT">
            <description>The capability of the software product to be adapted for different specified environments without applying actions or means other than those provided for this purpose for the software considered.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <annotations>
                <annotation author="koerner" date="2007-01-06" descriptionid="572789604"/>
            </annotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="PORT" value="high"/>
        </aspect>
        <aspect full="Availability" name="AVAIL">
            <description>The degree to which essential functions are still available even though some part of the system is down.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="SEC" value="low"/>
        </aspect>
        <aspect full="Changeability" name="CHANG">
            <description>The capability of the software product to enable a specified modification to be implemented.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="high"/>
            <optionimportance extra="MAINT" value="high"/>
        </aspect>
        <aspect full="Confidentiality" name="COFID">
            <description>The nonoccurrence of the unauthorized disclosure of information.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="SEC" value="high"/>
        </aspect>
        <aspect full="Configurability" name="CONF">
            <description>Support to adapt the software to the needs of specific customer or customer groups by means of configuration, i.e. without changing the source code of the software.</description>
            <quotations>
                <quotation descriptionid="67260070"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="MAINT" value="medium"/>
        </aspect>
        <aspect full="Correctness" name="CORR">
            <description>The capability of the software product to provide functions that meet stated and implied functional and non-functional requirements.</description>
            <quotations>
                <quotation descriptionid="-595890426"/>
            </quotations>
            <optioncoverage value="medium"/>
            <optionimportance extra="REL" value="low"/>
        </aspect>
        <aspect full="Craftsmanship" name="CRAFT">
            <description>The degree, software developers adhere to established guidelines and standards of an application domain during development and maintenance.</description>
            <optioncoverage value="high"/>
            <optionimportance extra="MAINT" value="medium"/>
        </aspect>
        <aspect full="Documentation" name="DOCU">
            <description>The extent to which all relevant aspects of the software (architecture, interfaces, implementation details, non functional requirements, etc.) are documented in a way, that development and maintenance of the software is explicitly supported.</description>
            <quotations>
                <quotation descriptionid="478115212"/>
            </quotations>
            <optioncoverage value="low"/>
            <optionimportance extra="MAINT" value="low"/>
        </aspect>
        <aspect full="Efficiency" name="EFF">
            <description>Efficiency is the capability of the software product to provide appropriate performance, relative to the amount of resources used, under stated conditions. </description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="low"/>
        </aspect>
        <aspect full="Efficiency Conformance" name="EFFCO">
            <description>The capability of the software product to adhere to standards or conventions relating to efficiency.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="EFF" value="low"/>
        </aspect>
        <aspect full="Fault Tolerance" name="FAULT">
            <description>The capability of the software to remain functioning in a reasonable way in case of external defects that become visible to the software by means of the defined interfaces.</description>
            <quotations>
                <quotation descriptionid="-595890426"/>
            </quotations>
            <optioncoverage value="medium"/>
            <optionimportance extra="REL" value="low"/>
        </aspect>
        <aspect full="Installability" name="INSTA">
            <description>The capability of the software product to be installed in a specified environment.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="PORT" value="low"/>
        </aspect>
        <aspect full="Integrity" name="INTEG">
            <description>The degree to which a system or component prevents unauthorized access to, or modification of, computer programs or data.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="low"/>
            <optionimportance extra="SEC" value="high"/>
        </aspect>
        <aspect full="Maintainability Conformance" name="MAICO">
            <description>The capability of the software product to adhere to standards or conventions relating to maintainability.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="high"/>
            <optionimportance extra="MAINT" value="medium"/>
        </aspect>
        <aspect full="Maintainability" name="MAINT">
            <description>Maintainability is the capability of the software product to be modified. Modifications may include corrections, improvements or adaptations of the software to changes in environment, and in requirements and functional specifications.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="high"/>
        </aspect>
        <aspect full="Portability Conformance" name="PORCO">
            <description>The capability of the software product to adhere to standards or conventions relating to portability.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="PORT" value="high"/>
        </aspect>
        <aspect full="Portability" name="PORT">
            <description>Portability is the capability of the software product to be transferred from one environment to another.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="very%20low"/>
        </aspect>
        <aspect full="Prelude policy" name="PP">
            <description>Messages that tend to indicate tool configuration problems.</description>
        </aspect>
        <aspect full="Readability" name="READ">
            <description>The degree to which a system's functions and those of its component statements can be easily discerned by reading the associated source code.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="high"/>
            <optionimportance extra="MAINT" value="medium"/>
        </aspect>
        <aspect full="Reliability" name="REL">
            <description>Reliability is the capability of the software product to maintain a specified level of performance when used under specified conditions. </description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="low"/>
        </aspect>
        <aspect full="Resource Utilization" name="RES">
            <description>The capability of the software product to use appropriate amounts and types of resources when the software performs its function under stated conditions.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="low"/>
            <optionimportance extra="EFF" value="low"/>
        </aspect>
        <aspect full="Robustness" name="ROB">
            <description>The extent to which the Software is able to remain functioning and powerful in case of unexpected internal or external defects.</description>
            <quotations>
                <quotation descriptionid="-595890426"/>
            </quotations>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="REL" value="low"/>
        </aspect>
        <aspect full="Runtime Stability" name="RSTAB">
            <description>The extent to which the software remains powerful in case of expected variations of conditions of operation.</description>
            <optioncoverage value="very%20low"/>
            <optionimportance extra="REL" value="low"/>
        </aspect>
        <aspect full="Static analysis tool error" name="SAE">
            <description>This category is for static analysis error messages.</description>
        </aspect>
        <aspect full="Security" name="SEC">
            <description>Security is the capability of the software product to protect information and data in a way that unauthorised persons or systems cannot read or modify them and authorised persons or systems are not denied access to them.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="very%20low"/>
        </aspect>
        <aspect full="Simplicity" name="SIMPL">
            <description>1. (Apparent) the degree to which a system or component has a design or implementation that is difficult to understand and verify. 
2. (Inherent) the degree of complication of a system or system component, determined by such factors as the number and intricacy of interfaces, the number and intricacy of conditional branches, the degree of nesting, and the types of data structures.</description>
            <quotations>
                <quotation descriptionid="-934468163"/>
            </quotations>
            <optioncoverage value="medium"/>
            <optionimportance extra="MAINT" value="high"/>
        </aspect>
        <aspect full="Soundness" name="SOUND">
            <description>The extent to which the software is designed and implemented in a way that it does not cause internal or external defects.</description>
            <optioncoverage value="low"/>
            <optionimportance extra="REL" value="low"/>
        </aspect>
        <aspect full="Special" name="SP">
            <description>Special issues are code analyzer issues, or unassigned rules and metrics. Has to be sorted out in reports.</description>
        </aspect>
        <aspect full="Structuredness" name="STRUC">
            <description>The degree to which a system or component possesses a definite pattern of organization of its interdependent parts.</description>
            <quotations>
                <quotation descriptionid="81975"/>
            </quotations>
            <optioncoverage value="low"/>
            <optionimportance extra="MAINT" value="high"/>
        </aspect>
        <aspect full="Testability" name="TEST">
            <description>The capability of the software product to enable modified software to be validated.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="medium"/>
            <optionimportance extra="MAINT" value="medium"/>
        </aspect>
        <aspect full="Time Behaviour" name="TIME">
            <description>The capability of the software product to provide appropriate response and processing times and throughput rates when performing its function under stated conditions.</description>
            <quotations>
                <quotation descriptionid="1317499447"/>
            </quotations>
            <optioncoverage value="low"/>
            <optionimportance extra="EFF" value="low"/>
        </aspect>
        <aspect full="Unassigned measures" name="UM">
            <description>This category is meant for currently unassigned measures.</description>
            <annotations>
                <annotation author="matthias.saft@siemens.com" date="2010-07-14" descriptionid="1483943197"/>
            </annotations>
        </aspect>
        <indicator full="Always define equals AND hash method" name="Always%20define%20equals%20AND%20hash%20method"/>
        <indicator full="Always same result for boolean expression" name="Always%20same%20result%20for%20boolean%20expression"/>
        <indicator full="Case statement should have break" name="Case%20statement%20should%20have%20break"/>
        <indicator full="Catch blocks should not be empty" name="Catch%20blocks%20should%20not%20be%20empty"/>
        <indicator full="Class names should start with upper case" name="Class%20names%20should%20start%20with%20upper%20case"/>
        <indicator full="Class too large" name="Class%20too%20large"/>
        <indicator full="Comparing floating points" name="Comparing%20floating%20points"/>
        <indicator full="Comparing strings by reference" name="Comparing%20strings%20by%20reference"/>
        <indicator full="EncapsulationViolation" name="EncapsulationViolation"/>
        <indicator full="ExcessiveMethodNumber" name="ExcessiveMethodNumber"/>
        <indicator full="ExcessiveParameterNumber" name="ExcessiveParameterNumber"/>
        <indicator full="Field names should start with lower case" name="Field%20names%20should%20start%20with%20lower%20case"/>
        <indicator full="Field should be static" name="Field%20should%20be%20static"/>
        <indicator full="Finalize does not call super.finalize()" name="Finalize%20does%20not%20call%20super.finalize()"/>
        <indicator full="Instantiation of java.lang.Boolean" name="Instantiation%20of%20java.lang.Boolean"/>
        <indicator full="Instantiation of java.lang.String" name="Instantiation%20of%20java.lang.String"/>
        <indicator full="LowCommentRatio" name="LowCommentRatio"/>
        <indicator full="Method names should start with lower case" name="Method%20names%20should%20start%20with%20lower%20case"/>
        <indicator full="Method too long" name="Method%20too%20long"/>
        <indicator full="No assignment in expressions" name="No%20assignment%20in%20expressions"/>
        <indicator full="Proper clone implementation" name="Proper%20clone%20implementation"/>
        <indicator full="Redefining symbols" name="Redefining%20symbols"/>
        <indicator full="Too many cases in switch" name="Too%20many%20cases%20in%20switch"/>
        <indicator full="UnfinishedCode" name="UnfinishedCode"/>
        <indicator full="Unused private field" name="Unused%20private%20field"/>
        <indicator full="Unused private method" name="Unused%20private%20method"/>
        <metric full="UnfinishedCode" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck" subtype="Rule">
            <description>Definition:
Unfinished code are indicated by comments in the source code like &#8220;todo&#8221;, &#8220;hack&#8221; and  &#8220;fixme&#8221; (irrespective of the case used)
Description:
It is quite often necessary to implement shortsighted workarounds due to the hectic schedule and generally these are marked in the code using comments. In productive code, these workarounds should not exist as it makes the system unreliable. 

This rule needs an appropriate configuration file to work properly.</description>
            <quotations>
                <quotation descriptionid="1478429465"/>
            </quotations>
        </metric>
        <metric full="EncapsulationViolation" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck" subtype="Rule">
            <description>Class allowing the direct access of non-const public attributes from outside.

One of the main goals of OO is encapsulation meaning Objects work like abstract data types which offer services hiding the internal data. Encapsulation skillfully employed enables validity and correctness check are done for every change.
</description>
            <quotations>
                <quotation descriptionid="1140998653"/>
            </quotations>
            <optioneffort value="high"/>
        </metric>
        <metric full="Missing method comment" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck" subtype="Rule">
            <description>Checks the Javadoc of a method or constructor. By default, does not check for unused throws. 

This rule needs an appropriate configuration file to work properly.</description>
            <optioneffort value="low"/>
        </metric>
        <metric full="Missing type comment" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck" subtype="Rule">
            <description>Checks Javadoc comments for class and interface definitions. By default, does not check for author or version tags.</description>
            <optioneffort value="low"/>
        </metric>
        <metric full="Missing variable comment" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck" subtype="Rule">
            <description>Checks that variables have Javadoc comments.</description>
            <optioneffort value="low"/>
        </metric>
        <metric full="ParameterNumber" key="false" language="Java" name="Checkstyle$com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck" subtype="Rule">
            <description>Long parameter list is indicated for methods having more than 7 parameters. 

Methods with lot of parameters are hard to understand and are volatile. The other alternative is to encompass this into an object and pass the object as a parameter. </description>
            <optioneffort value="medium"/>
        </metric>
        <metric full="Creates an empty jar file entry" key="false" language="Java" name="FindBugs$AM_CREATES_EMPTY_JAR_FILE_ENTRY" subtype="Rule">
            <description>The code calls putNextEntry(), immediately followed by a call to closeEntry(). This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to putNextEntry() and closeEntry().
</description>
            <quotations>
                <quotation descriptionid="-905272226"/>
            </quotations>
        </metric>
        <metric full="Creates an empty zip file entry" key="false" language="Java" name="FindBugs$AM_CREATES_EMPTY_ZIP_FILE_ENTRY" subtype="Rule">
            <description>The code calls putNextEntry(), immediately followed by a call to closeEntry(). This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to putNextEntry() and closeEntry().</description>
            <quotations>
                <quotation descriptionid="1189661576"/>
            </quotations>
        </metric>
        <metric full="Impossible cast" key="false" language="Java" name="FindBugs$BC_IMPOSSIBLE_CAST" subtype="Rule">
            <description>This cast will always throw a ClassCastException.</description>
            <quotations>
                <quotation descriptionid="878848189"/>
            </quotations>
        </metric>
        <metric full="Instanceof will always return false" key="false" language="Java" name="FindBugs$BC_IMPOSSIBLE_INSTANCEOF" subtype="Rule">
            <description>This instanceof test will always return false. Although this is safe, make sure it isn't an indication of some misunderstanding or some other logic error.</description>
            <quotations>
                <quotation descriptionid="64588093"/>
            </quotations>
        </metric>
        <metric full="Unchecked/unconfirmed cast" key="false" language="Java" name="FindBugs$BC_UNCONFIRMED_CAST" subtype="Rule">
            <description>This cast is unchecked, and not all instances of the type casted from can be cast to the type it is being cast to. Ensure that your program logic ensures that this cast will not fail.</description>
            <quotations>
                <quotation descriptionid="-1652381569"/>
            </quotations>
        </metric>
        <metric full="Instanceof will always return true" key="false" language="Java" name="FindBugs$BC_VACUOUS_INSTANCEOF" subtype="Rule">
            <description>This instanceof test will always return true. Although this is safe, make sure it isn't an indication of some misunderstanding or some other logic error. </description>
            <quotations>
                <quotation descriptionid="1262453362"/>
            </quotations>
        </metric>
        <metric full="Clone Method not implemented" key="false" language="Java" name="FindBugs$CN_IDIOM" subtype="Rule">
            <description>Class implements Cloneable but does not define or use the clone method.</description>
            <quotations>
                <quotation descriptionid="-927375626"/>
            </quotations>
        </metric>
        <metric full="Clone method does not call super.clone()" key="false" language="Java" name="FindBugs$CN_IDIOM_NO_SUPER_CALL" subtype="Rule">
            <description>This class defines a clone() method that does not call super.clone(), and is not final. If this class ("A") is extended by a subclass ("B"), and the subclass B calls super.clone(), then it is likely that B's clone() method will return an object of type A, which violates the standard contract for clone().

If all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.
</description>
            <quotations>
                <quotation descriptionid="-132288946"/>
            </quotations>
        </metric>
        <metric full="Duplicate branches in method" key="false" language="Java" name="FindBugs$DB_DUPLICATE_BRANCHES" subtype="Rule">
            <description>This method uses the same code to implement two branches of an if/else or switch statement. </description>
            <quotations>
                <quotation descriptionid="198486916"/>
            </quotations>
        </metric>
        <metric full="Possible double check of field" key="false" language="Java" name="FindBugs$DC_DOUBLECHECK" subtype="Rule">
            <description>This method may contain an instance of double-checked locking.  This idiom is not correct according to the semantics of the Java memory model.  For more information, see the web page http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html.</description>
            <quotations>
                <quotation descriptionid="-22070190"/>
            </quotations>
        </metric>
        <metric full="Overwritten increment" key="false" language="Java" name="FindBugs$DLS_OVERWRITTEN_INCREMENT" subtype="Rule">
            <description>The code performs an increment operation (e.g., i++) and then immediately overwrites it. For example, i = i++ immediately overwrites the incremented value with the original value.</description>
            <quotations>
                <quotation descriptionid="-2076258401"/>
            </quotations>
        </metric>
        <metric full="Invocation of dubious boolean constructor" key="false" language="Java" name="FindBugs$DM_BOOLEAN_CTOR" subtype="Rule">
            <description>Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.  Use the Boolean.valueOf() method to create Boolean objects instead.</description>
            <quotations>
                <quotation descriptionid="-1736088707"/>
            </quotations>
        </metric>
        <metric full=" Boxed primitive used just to call toString" key="false" language="Java" name="FindBugs$DM_BOXED_PRIMITIVE_TOSTRING" subtype="Rule">
            <description>A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,

Replace... With this... 
new Integer(1).toString() Integer.toString(1) 
new Long(1).toString() Long.toString(1) 
new Float(1.0).toString() Float.toString(1.0) 
new Double(1.0).toString() Double.toString(1.0) 
new Byte(1).toString() Byte.toString(1) 
new Short(1).toString() Short.toString(1) 
new Boolean(true).toString() Boolean.toString(true) </description>
            <quotations>
                <quotation descriptionid="-1270179189"/>
            </quotations>
        </metric>
        <metric full="Method invokes System.exit(...)" key="true" language="Java" name="FindBugs$DM_EXIT" subtype="Rule">
            <description>Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.
</description>
            <quotations>
                <quotation descriptionid="-1849555515"/>
            </quotations>
        </metric>
        <metric full="Explicit garbage collection" key="false" language="Java" name="FindBugs$DM_GC" subtype="Rule">
            <description>Code explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.

In the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.</description>
            <quotations>
                <quotation descriptionid="502898217"/>
            </quotations>
        </metric>
        <metric full="Monitor wait() called on Condition" key="false" language="Java" name="FindBugs$DM_MONITOR_WAIT_ON_CONDITION" subtype="Rule">
            <description>This method calls wait() on a java.util.concurrent.locks.Condition object.  Waiting for a Condition should be done using one of the await() methods defined by the Condition interface.</description>
            <quotations>
                <quotation descriptionid="-791722424"/>
            </quotations>
        </metric>
        <metric full="Creates instance to get the class object" key="false" language="Java" name="FindBugs$DM_NEW_FOR_GETCLASS" subtype="Rule">
            <description>This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.</description>
            <quotations>
                <quotation descriptionid="1140336003"/>
            </quotations>
        </metric>
        <metric full="Invocation of runFinalizersOnExit" key="false" language="Java" name="FindBugs$DM_RUN_FINALIZERS_ON_EXIT" subtype="Rule">
            <description>Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries. -- Joshua Bloch</description>
            <quotations>
                <quotation descriptionid="-167215300"/>
            </quotations>
        </metric>
        <metric full="Invocation of dubious new String(String) constructor" key="false" language="Java" name="FindBugs$DM_STRING_CTOR" subtype="Rule">
            <description>Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.  Just use the argument String directly.</description>
            <quotations>
                <quotation descriptionid="-1184823833"/>
            </quotations>
        </metric>
        <metric full="Invocation of dubious String.equals" key="false" language="Java" name="FindBugs$DM_STRING_EMPTY_EQUALS" subtype="Rule">
            <description>An object is compared to the empty String object using the equals() method here. Checking that the String object's length is zero may be faster, and removes String constants from the class file.</description>
            <quotations>
                <quotation descriptionid="1241702359"/>
            </quotations>
        </metric>
        <metric full="Invocation of toString not necessary" key="false" language="Java" name="FindBugs$DM_STRING_TOSTRING" subtype="Rule">
            <description>Calling String.toString() is just a redundant operation. Just use the String.</description>
            <quotations>
                <quotation descriptionid="121337960"/>
            </quotations>
        </metric>
        <metric full="Invocation of standard string constructor" key="false" language="Java" name="FindBugs$DM_STRING_VOID_CTOR" subtype="Rule">
            <description>Creating a new java.lang.String object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant "".  Java guarantees that identical string constants will be represented by the same String object.  Therefore, you should just use the empty string constant directly.</description>
            <quotations>
                <quotation descriptionid="-1865468156"/>
            </quotations>
        </metric>
        <metric full="Empty run method in thread" key="false" language="Java" name="FindBugs$DM_USELESS_THREAD" subtype="Rule">
            <description>This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.</description>
            <quotations>
                <quotation descriptionid="-260335594"/>
            </quotations>
        </metric>
        <metric full="Suspect invocation of equals() on an array" key="true" language="Java" name="FindBugs$EC_BAD_ARRAY_COMPARE" subtype="Rule">
            <description>This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]). </description>
            <quotations>
                <quotation descriptionid="723698710"/>
            </quotations>
        </metric>
        <metric full="Invocation of equals with null argument" key="false" language="Java" name="FindBugs$EC_NULL_ARG" subtype="Rule">
            <description>This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return false.</description>
            <quotations>
                <quotation descriptionid="-2045760181"/>
            </quotations>
        </metric>
        <metric full="Method returns reference to mutable object" key="true" language="Java" name="FindBugs$EI_EXPOSE_REP" subtype="Rule">
            <description>Returning a reference to a mutable object value stored in one of the object's fields exposes the internal representation of the object.  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Returning a new copy of the object is better approach in many situations.</description>
            <quotations>
                <quotation descriptionid="264148690"/>
            </quotations>
        </metric>
        <metric full="Dubious string comparison using operators" key="true" language="Java" name="FindBugs$ES_COMPARING_STRINGS_WITH_EQ" subtype="Rule">
            <description>This code compares java.lang.String objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the String.intern() method, the same string value may be represented by two different String objects. Consider using the equals(Object) method instead.</description>
            <quotations>
                <quotation descriptionid="366614806"/>
            </quotations>
        </metric>
        <metric full="Empty synchronized block" key="false" language="Java" name="FindBugs$ESync_EMPTY_SYNC" subtype="Rule">
            <description>The code contains an empty synchronized block:

synchronized() {}

Empty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.</description>
            <quotations>
                <quotation descriptionid="19207526"/>
            </quotations>
        </metric>
        <metric full="Test for floating point equality" key="false" language="Java" name="FindBugs$FE_FLOATING_POINT_EQUALITY" subtype="Rule">
            <description>This operation compares two floating point values for equality. Because floating point calculations may involve rounding, calculated float and double values may not be accurate. For values that must be precise, such as monetary values, consider using a fixed-precision type such as BigDecimal. For values that need not be precise, consider comparing for equality within some range, for example: if ( Math.abs(x - y) &lt; .0000001 ). See the Java Language Specification, section 4.2.4.</description>
            <quotations>
                <quotation descriptionid="-2144737174"/>
            </quotations>
        </metric>
        <metric full="Explicit invocation of finalizer" key="false" language="Java" name="FindBugs$FI_EXPLICIT_INVOCATION" subtype="Rule">
            <description>This method contains an explicit invocation of the finalize() method on an object.  Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.</description>
            <quotations>
                <quotation descriptionid="1202852648"/>
            </quotations>
        </metric>
        <metric full="Finalizer does not call superclass finalizer" key="false" language="Java" name="FindBugs$FI_MISSING_SUPER_CALL" subtype="Rule">
            <description>This finalize() method does not make a call to its superclass's finalize() method.  So, any finalizer actions defined for the superclass will not be performed.  Add a call to super.finalize().</description>
            <quotations>
                <quotation descriptionid="-1981267796"/>
            </quotations>
        </metric>
        <metric full="Class defines equals() but not hashCode()" key="true" language="Java" name="FindBugs$HE_EQUALS_NO_HASHCODE" subtype="Rule">
            <description>This class overrides equals(Object), but does not override hashCode().  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.</description>
            <quotations>
                <quotation descriptionid="-738685781"/>
            </quotations>
        </metric>
        <metric full="Class defines hashCode() but not equals()" key="true" language="Java" name="FindBugs$HE_HASHCODE_NO_EQUALS" subtype="Rule">
            <description>This class defines a hashCode() method but not an equals() method.  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.</description>
            <quotations>
                <quotation descriptionid="-175236637"/>
            </quotations>
        </metric>
        <metric full="Initialization circularity for static initializers" key="false" language="Java" name="FindBugs$IC_INIT_CIRCULARITY" subtype="Rule">
            <description>A circularity was detected in the static initializers of the two classes referenced by the bug instance.  Many kinds of unexpected behavior may arise from such circularity.</description>
            <quotations>
                <quotation descriptionid="-460909071"/>
            </quotations>
        </metric>
        <metric full="A container is added to itself." key="false" language="Java" name="FindBugs$IL_CONTAINER_ADDED_TO_ITSELF" subtype="Rule">
            <description>A container is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.</description>
            <quotations>
                <quotation descriptionid="1287103455"/>
            </quotations>
        </metric>
        <metric full="Method invokes itself unconditionally" key="false" language="Java" name="FindBugs$IL_INFINITE_RECURSIVE_LOOP" subtype="Rule">
            <description>This method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow. Possibly, a super-call was intentended or it simply is an error in an recursive algorithm.</description>
            <quotations>
                <quotation descriptionid="608815917"/>
            </quotations>
        </metric>
        <metric full="Dubious catching of IllegalMonitorStateException" key="false" language="Java" name="FindBugs$IMSE_DONT_CATCH_IMSE" subtype="Rule">
            <description>IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).</description>
            <quotations>
                <quotation descriptionid="958783783"/>
            </quotations>
        </metric>
        <metric full="Value of parameter is ignored but overwritten" key="false" language="Java" name="FindBugs$IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN" subtype="Rule">
            <description>The initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller. </description>
            <quotations>
                <quotation descriptionid="1506560898"/>
            </quotations>
        </metric>
        <metric full="Needless instantiation of class that only supplies static methods" key="false" language="Java" name="FindBugs$ISC_INSTANTIATE_STATIC_CLASS" subtype="Rule">
            <description>This class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.</description>
            <quotations>
                <quotation descriptionid="686334580"/>
            </quotations>
        </metric>
        <metric full="Incorrect lazy initialization of static field" key="false" language="Java" name="FindBugs$LI_LAZY_INIT_STATIC" subtype="Rule">
            <description>This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, if the method can be called by multiple threads. You can make the field volatile to correct the problem. For more information, see the Java Memory Model web site. </description>
            <quotations>
                <quotation descriptionid="-1562640255"/>
            </quotations>
        </metric>
        <metric full="Class hides field of super class" key="true" language="Java" name="FindBugs$MF_CLASS_MASKS_FIELD" subtype="Rule">
            <description>This class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.</description>
            <quotations>
                <quotation descriptionid="-826595812"/>
            </quotations>
        </metric>
        <metric full="Local variable hides class field" key="true" language="Java" name="FindBugs$MF_METHOD_MASKS_FIELD" subtype="Rule">
            <description>This method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.</description>
            <quotations>
                <quotation descriptionid="1800640827"/>
            </quotations>
        </metric>
        <metric full="Method (public static ) exposes internal representation by returning array" key="true" language="Java" name="FindBugs$MS_EXPOSE_REP" subtype="Rule">
            <description>A public static method returns a reference to an array that is part of the static state of the class. Any code that calls this method can freely modify the underlying array. One fix is to return a copy of the array.</description>
            <quotations>
                <quotation descriptionid="1740614085"/>
            </quotations>
        </metric>
        <metric full="Static field should be both final and package protected" key="true" language="Java" name="FindBugs$MS_FINAL_PKGPROTECT" subtype="Rule">
            <description>A mutable static field could be changed by malicious code or by accident from another package. The field could be made package protected and/or made final to avoid this vulnerability.</description>
            <quotations>
                <quotation descriptionid="1521946364"/>
            </quotations>
        </metric>
        <metric full="Final field references mutable array" key="true" language="Java" name="FindBugs$MS_MUTABLE_ARRAY" subtype="Rule">
            <description>A final static field references an array and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the array.</description>
            <quotations>
                <quotation descriptionid="-74370332"/>
            </quotations>
        </metric>
        <metric full="Final Field references mutable Hashtable" key="true" language="Java" name="FindBugs$MS_MUTABLE_HASHTABLE" subtype="Rule">
            <description>A final static field references a Hashtable and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the Hashtable.</description>
            <quotations>
                <quotation descriptionid="-1176212419"/>
            </quotations>
        </metric>
        <metric full="Static field should be final" key="true" language="Java" name="FindBugs$MS_SHOULD_BE_FINAL" subtype="Rule">
            <description>A mutable static field could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.</description>
            <quotations>
                <quotation descriptionid="1967493530"/>
            </quotations>
        </metric>
        <metric full="Class names should start with an upper case letter" key="true" language="Java" name="FindBugs$NM_CLASS_NAMING_CONVENTION" subtype="Rule">
            <description>Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML). </description>
            <quotations>
                <quotation descriptionid="1252152775"/>
            </quotations>
        </metric>
        <metric full="Class is not derived from an Exception, even though it is named as such" key="false" language="Java" name="FindBugs$NM_CLASS_NOT_EXCEPTION" subtype="Rule">
            <description>This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.</description>
            <quotations>
                <quotation descriptionid="1311305727"/>
            </quotations>
        </metric>
        <metric full="Field names should start with an lower case letter" key="true" language="Java" name="FindBugs$NM_FIELD_NAMING_CONVENTION" subtype="Rule">
            <description>Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized. </description>
            <quotations>
                <quotation descriptionid="-1192445494"/>
            </quotations>
        </metric>
        <metric full="Method names should start with an lower case letter" key="true" language="Java" name="FindBugs$NM_METHOD_NAMING_CONVENTION" subtype="Rule">
            <description>Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.</description>
            <quotations>
                <quotation descriptionid="-663576613"/>
            </quotations>
        </metric>
        <metric full="Method names differ in capitalization only" key="true" language="Java" name="FindBugs$NM_VERY_CONFUSING" subtype="Rule">
            <description>The referenced methods have names that differ only by capitalization.</description>
            <quotations>
                <quotation descriptionid="-83013454"/>
            </quotations>
        </metric>
        <metric full="Method names (related by inheritance) differ in capitalization only" key="true" language="Java" name="FindBugs$NM_VERY_CONFUSING_INTENTIONAL" subtype="Rule">
            <description>The referenced methods have names that differ only by capitalization. It is very confusing because the classes that contain these methods are related by inheritance.</description>
            <quotations>
                <quotation descriptionid="-83013454"/>
            </quotations>
        </metric>
        <metric full="Prefer using notifyAll() rather than notify()" key="false" language="Java" name="FindBugs$NO_NOTIFY_NOT_NOTIFYALL" subtype="Rule">
            <description>This method calls notify() rather than notifyAll().  Java monitors are often used for multiple conditions.  Calling notify() only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.</description>
            <quotations>
                <quotation descriptionid="1891377549"/>
            </quotations>
        </metric>
        <metric full="Null pointer dereference in method" key="false" language="Java" name="FindBugs$NP_ALWAYS_NULL" subtype="Rule">
            <description>A null pointer is dereferenced here.  This will lead to a NullPointerException when the code is executed.</description>
            <quotations>
                <quotation descriptionid="286046926"/>
            </quotations>
        </metric>
        <metric full="Field not initialized in constructor" key="false" language="Java" name="FindBugs$NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" subtype="Rule">
            <description>This is a read of a field is never initialized within any constructor, and is therefore could be null after the object is initialized. This might be a coding error, or else the class containing the field is written in a way that depends upon methods being called in some specific order (a little bit dodgy, but not necessarily wrong). </description>
            <quotations>
                <quotation descriptionid="-1610159493"/>
            </quotations>
        </metric>
        <metric full="Immediate dereference of the result of readLine()" key="false" language="Java" name="FindBugs$NP_IMMEDIATE_DEREFERENCE_OF_READLINE" subtype="Rule">
            <description>The result of invoking readLine() is immediately dereferenced. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception. </description>
            <quotations>
                <quotation descriptionid="1101334788"/>
            </quotations>
        </metric>
        <metric full="Method call passes null for unconditionally dereferenced parameter" key="false" language="Java" name="FindBugs$NP_NULL_PARAM_DEREF" subtype="Rule">
            <description>This method call passes a null value to a method which might dereference it unconditionally. </description>
            <quotations>
                <quotation descriptionid="1903339485"/>
            </quotations>
        </metric>
        <metric full="Field never initialized properly" key="false" language="Java" name="FindBugs$NP_UNWRITTEN_FIELD" subtype="Rule">
            <description>The program is deferencing a field that does not seem to ever have a non-null value written to it. Deferencing this value will generate a null pointer exception. </description>
            <quotations>
                <quotation descriptionid="1358334607"/>
            </quotations>
        </metric>
        <metric full="Possible failure by not closing database resource" key="false" language="Java" name="FindBugs$ODR_OPEN_DATABASE_RESOURCE" subtype="Rule">
            <description>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database. </description>
            <quotations>
                <quotation descriptionid="1675807439"/>
            </quotations>
        </metric>
        <metric full="Database possibly not closed in case of an exception" key="false" language="Java" name="FindBugs$ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH" subtype="Rule">
            <description>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.</description>
            <quotations>
                <quotation descriptionid="640741411"/>
            </quotations>
        </metric>
        <metric full="Possible failure due  to not closing stream" key="false" language="Java" name="FindBugs$OS_OPEN_STREAM" subtype="Rule">
            <description>The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the stream on all paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a finally block to ensure that streams are closed.

</description>
            <quotations>
                <quotation descriptionid="728226693"/>
            </quotations>
        </metric>
        <metric full="Stream possibly not closed in case of an exception" key="false" language="Java" name="FindBugs$OS_OPEN_STREAM_EXCEPTION_PATH" subtype="Rule">
            <description>The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.  This may result in a file descriptor leak.  It is generally a good idea to use a finally block to ensure that streams are closed.</description>
            <quotations>
                <quotation descriptionid="-283953363"/>
            </quotations>
        </metric>
        <metric full="Class Exception should not be caught" key="false" language="Java" name="FindBugs$REC_CATCH_EXCEPTION" subtype="Rule">
            <description>This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. </description>
            <quotations>
                <quotation descriptionid="-800324509"/>
            </quotations>
        </metric>
        <metric full="Invalid syntax for regular expression" key="false" language="Java" name="FindBugs$RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION" subtype="Rule">
            <description>The code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement throw a PatternSyntaxException when executed.</description>
            <quotations>
                <quotation descriptionid="1652065330"/>
            </quotations>
        </metric>
        <metric full="Return value of InputStream.read() ignored" key="false" language="Java" name="FindBugs$RR_NOT_CHECKED" subtype="Rule">
            <description>This method ignores the return value of one of the variants of java.io.InputStream.read() which can return multiple bytes.  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were read than the caller requested.  This is a particularly insidious kind of bug, because in many programs, reads from input streams usually do read the full amount of data requested, causing the program to fail only sporadically.</description>
            <quotations>
                <quotation descriptionid="1492159198"/>
            </quotations>
        </metric>
        <metric full="Method readObject() is synchronized" key="false" language="Java" name="FindBugs$RS_READOBJECT_SYNC" subtype="Rule">
            <description>This serializable class defines a readObject() which is synchronized.  By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for readObject() to be synchronized.  If the readObject() method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.</description>
            <quotations>
                <quotation descriptionid="-153452210"/>
            </quotations>
        </metric>
        <metric full="Explicit invocation of run()" key="false" language="Java" name="FindBugs$RU_INVOKE_RUN" subtype="Rule">
            <description>This method explicitly invokes run() on an object.  In general, classes implement the Runnable interface because they are going to have their run() method invoked in a new thread, in which case Thread.start() is the right method to call.</description>
            <quotations>
                <quotation descriptionid="-1005764816"/>
            </quotations>
        </metric>
        <metric full="Non-null value of readLine is ignored" key="false" language="Java" name="FindBugs$RV_DONT_JUST_NULL_CHECK_READLINE" subtype="Rule">
            <description>The value returned by readLine is discarded after checking to see if the return value is non-null. In almost all situations, if the result is non-null, you will want to use that non-null value. Calling readLine again will give you a different line.</description>
            <quotations>
                <quotation descriptionid="364971208"/>
            </quotations>
        </metric>
        <metric full="Method ignores return value" key="false" language="Java" name="FindBugs$RV_RETURN_VALUE_IGNORED" subtype="Rule">
            <description>The return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,

String dateString = getHeaderField(name);
dateString.trim();

the programs seems to be thinking that the trim function will update the String referenced by dateString. But since Strings are immutable, the trim function returns a new String value, which is being ignored here. The code should be corrected to: 

String dateString = getHeaderField(name);
dateString = dateString.trim();</description>
            <quotations>
                <quotation descriptionid="-1982858165"/>
            </quotations>
        </metric>
        <metric full="Use StringBuffer for concatination" key="false" language="Java" name="FindBugs$SBSC_USE_STRINGBUFFER_CONCATENATION" subtype="Rule">
            <description>The method seems to be building a String using concatenation in a loop. In each iteration, the String is converted to a StringBuffer/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration. 

Better performance can be obtained by using a StringBuffer (or StringBuilder in Java 1.5) explicitly.

For example:

  // This is bad
  String s = "";
  for (int i = 0; i &lt; field.length; ++i) {
    s = s + field[i];
  }

  // This is better
  StringBuffer buf = new StringBuffer();
  for (int i = 0; i &lt; field.length; ++i) {
    buf.append(field[i]);
  }
  String s = buf.toString();</description>
            <quotations>
                <quotation descriptionid="-1794626183"/>
            </quotations>
        </metric>
        <metric full="Field serialVersionUID not final" key="false" language="Java" name="FindBugs$SE_NONFINAL_SERIALVERSIONID" subtype="Rule">
            <description>This class defines a serialVersionUID field that is not final.  The field should be made final if it is intended to specify the version UID for purposes of serialization.</description>
            <quotations>
                <quotation descriptionid="-755960875"/>
            </quotations>
        </metric>
        <metric full="Field serialVersionUID not static" key="false" language="Java" name="FindBugs$SE_NONSTATIC_SERIALVERSIONID" subtype="Rule">
            <description>This class defines a serialVersionUID field that is not static.  The field should be made static if it is intended to specify the version UID for purposes of serialization.</description>
            <quotations>
                <quotation descriptionid="1291142759"/>
            </quotations>
        </metric>
        <metric full="Serializable class doesn't define serialVersionUID" key="true" language="Java" name="FindBugs$SE_NO_SERIALVERSIONID" subtype="Rule">
            <description>This class implements the Serializable interface, but does not define a serialVersionUID field.  A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to String.class will generate a static field class$java$lang$String). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.</description>
            <quotations>
                <quotation descriptionid="180070617"/>
            </quotations>
        </metric>
        <metric full="Case statement without break" key="true" language="Java" name="FindBugs$SF_SWITCH_FALLTHROUGH" subtype="Rule">
            <description>This method contains a switch statement where one case branch will fall thru to the next case. Usually you need to end this case with a break or return.</description>
            <quotations>
                <quotation descriptionid="779060817"/>
            </quotations>
        </metric>
        <metric full="Instance created before all static final field are assigned" key="false" language="Java" name="FindBugs$SI_INSTANCE_BEFORE_FINALS_ASSIGNED" subtype="Rule">
            <description>The class's static initializer creates an instance of the class before all of the static final fields are assigned.</description>
            <quotations>
                <quotation descriptionid="2045076886"/>
            </quotations>
        </metric>
        <metric full="Method ignores results of InputStream.skip()" key="false" language="Java" name="FindBugs$SR_NOT_CHECKED" subtype="Rule">
            <description>This method ignores the return value of java.io.InputStream.skip() which can skip multiple bytes.  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.  This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.</description>
            <quotations>
                <quotation descriptionid="-610182357"/>
            </quotations>
        </metric>
        <metric full="Field should be static" key="false" language="Java" name="FindBugs$SS_SHOULD_BE_STATIC" subtype="Rule">
            <description>This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.</description>
            <quotations>
                <quotation descriptionid="-1022246396"/>
            </quotations>
        </metric>
        <metric full="Method calls Thread.sleep() with a lock held" key="false" language="Java" name="FindBugs$SWL_SLEEP_WITH_LOCK_HELD" subtype="Rule">
            <description>This method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.</description>
            <quotations>
                <quotation descriptionid="-78888993"/>
            </quotations>
        </metric>
        <metric full="Certain swing methods should only be invoked from the Swing event thread" key="false" language="Java" name="FindBugs$SW_SWING_METHODS_INVOKED_IN_SWING_THREAD" subtype="Rule">
            <description>(From JDC Tech Tip): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI -- it's a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.</description>
            <quotations>
                <quotation descriptionid="-2013135941"/>
            </quotations>
        </metric>
        <metric full="Useless control flow in method" key="false" language="Java" name="FindBugs$UCF_USELESS_CONTROL_FLOW" subtype="Rule">
            <description>This method contains a useless control flow statement.  Often, this is caused by inadvertently using an empty statement as the body of an if statement, e.g.:

    if (argv.length == 1);
        System.out.println("Hello, " + argv[0]);</description>
            <quotations>
                <quotation descriptionid="2016907221"/>
            </quotations>
        </metric>
        <metric full="Method does not release lock on all paths" key="false" language="Java" name="FindBugs$UL_UNRELEASED_LOCK" subtype="Rule">
            <description>This method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is: 

    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }</description>
            <quotations>
                <quotation descriptionid="-1552725703"/>
            </quotations>
        </metric>
        <metric full="Method does not release lock on all exception paths" key="false" language="Java" name="FindBugs$UL_UNRELEASED_LOCK_EXCEPTION_PATH" subtype="Rule">
            <description>This method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is: 

    Lock l = ...;
    l.lock();
    try {
        // do something
    } finally {
        l.unlock();
    }
</description>
            <quotations>
                <quotation descriptionid="-1552725703"/>
            </quotations>
        </metric>
        <metric full="Unused private method" key="false" language="Java" name="FindBugs$UPM_UNCALLED_PRIVATE_METHOD" subtype="Rule">
            <description>This private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.</description>
            <quotations>
                <quotation descriptionid="-224275165"/>
            </quotations>
        </metric>
        <metric full="Unread Field" key="false" language="Java" name="FindBugs$URF_UNREAD_FIELD" subtype="Rule">
            <description>This field is never read.  Consider removing it from the class.</description>
            <quotations>
                <quotation descriptionid="-1229008344"/>
            </quotations>
        </metric>
        <metric full="Unused field" key="false" language="Java" name="FindBugs$UUF_UNUSED_FIELD" subtype="Rule">
            <description>This field is never used.  Consider removing it from the class.</description>
            <quotations>
                <quotation descriptionid="343961636"/>
            </quotations>
        </metric>
        <metric full="Unconditional wait in method" key="false" language="Java" name="FindBugs$UW_UNCOND_WAIT" subtype="Rule">
            <description>This method contains a call to java.lang.Object.wait() which is not guarded by conditional control flow.  If the condition that the method intends to wait for has already happened, the thread could wait indefinitely.</description>
            <quotations>
                <quotation descriptionid="-1101379916"/>
            </quotations>
        </metric>
        <metric full="Wait not in loop in method" key="false" language="Java" name="FindBugs$WA_NOT_IN_LOOP" subtype="Rule">
            <description>This method contains a call to java.lang.Object.wait() which is not in a loop.  If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.</description>
            <quotations>
                <quotation descriptionid="1918112045"/>
            </quotations>
        </metric>
        <metric full="AbstractClassWithoutAbstractMethod" key="false" name="PMD$AbstractClassWithoutAbstractMethod" subtype="Rule">
            <description>The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.
				
				This rule is defined by the following XPath expression:
				
				//ClassOrInterfaceDeclaration
				[@Abstract='true'
				and count( .//MethodDeclaration[@Abstract='true'] )=0 ]
				[count(ImplementsList)=0]
				[count(.//ExtendsList)=0]
				
				
				
				

				Example:
				
				
				
				public abstract class Foo {
				void int method1() { ... }
				void int method2() { ... }
				// consider using abstract methods or removing
				// the abstract modifier and adding protected constructors
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AbstractClassWithoutAnyMethod" key="false" name="PMD$AbstractClassWithoutAnyMethod" subtype="Rule">
            <description>If the abstract class does not provides any methods, it may be just a data container that is not to be instantiated. In this case, it's probably better to use a private or a protected constructor in order to prevent instantiation than make the class misleadingly abstract.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="934696085"/>
            </examples>
        </metric>
        <metric full="AbstractNamingRule" key="false" language="Java" name="PMD$AbstractNaming" subtype="Rule">
            <description>Abstract classes should be named 'AbstractXXX'</description>
        </metric>
        <metric full="AccessorClassGeneration" key="false" name="PMD$AccessorClassGeneration" subtype="Rule">
            <description>Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privitization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.AccessorClassGeneration
				
				

				Example:
				
				
				
				public class Outer {
				void method(){
				Inner ic = new Inner();//Causes generation of accessor class
				}
				public class Inner {
				private Inner(){}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AddEmptyString" key="false" name="PMD$AddEmptyString" subtype="Rule">
            <description>Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.
				
				This rule is defined by the following XPath expression:
				
				
				//AdditiveExpression/PrimaryExpression/PrimaryPrefix/Literal
				[string-length(@Image)=2]
				[starts-with(@Image, '"')]
				[ends-with(@Image, '"')]
				
				
				
				

				Example:
				
				
				
				String s = "" + 123; // bad 
				String t = Integer.toString(456); // ok 
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AppendCharacterWithChar" key="false" name="PMD$AppendCharacterWithChar" subtype="Rule">
            <description>Avoid concatenating characters as strings in StringBuffer.append.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.AppendCharacterWithChar
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				StringBuffer sb=new StringBuffer();
				// Avoid this
				sb.append("a");
				
				// use instead something like this
				StringBuffer sb=new StringBuffer();
				sb.append('a');
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AssignmentInOperandRule" key="true" language="Java" name="PMD$AssignmentInOperand" subtype="Rule">
            <description>Avoid assigments in operands</description>
        </metric>
        <metric full="AtLeastOneConstructor" key="false" name="PMD$AtLeastOneConstructor" subtype="Rule">
            <description>Each class should declare at least one constructor.
				
				This rule is defined by the following XPath expression:
				
				
				//ClassOrInterfaceDeclaration
				[not(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)]
				[@Interface='false']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				// no constructor!  not good!
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidArrayLoops" key="false" name="PMD$AvoidArrayLoops" subtype="Rule">
            <description> Instead of copying data between two arrays, use System.arraycopy method
				
				This rule is defined by the following XPath expression:
				
				
				//Statement[(ForStatement or WhileStatement) and
				count(*//AssignmentOperator[@Image = '='])=1
				and
				*/Statement
				[
				./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
				/PrimaryPrefix/Name/../../PrimarySuffix/Expression
				[(PrimaryExpression or AdditiveExpression) and count
				(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image
				and
				./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression
				/PrimaryPrefix/Name/../../PrimarySuffix[count
				(..//PrimarySuffix)=1]/Expression[(PrimaryExpression
				or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]
				//PrimaryPrefix/Name/@Image
				]]
				
				
				
				

				Example:
				
				
				
				public class Test {
				public void bar() {
				int[] a = new int[10];
				int[] b = new int[10];
				for (int i=0;i&lt;10;i++) {
				b[i]=a[i];
				}
				}
				}
				// this will trigger the rule
				for (int i=0;i&lt;10;i++) {
				b[i]=a[c[i]];
				}
				
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidCatchingNPE" key="false" name="PMD$AvoidCatchingNPE" subtype="Rule">
            <description> Code should never throw NPE under normal circumstances. A catch block may hide the original error, causing other more subtle errors in its wake.
				
				This rule is defined by the following XPath expression:
				
				
				//CatchStatement/FormalParameter/Type
				/ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']
				
				
				
				

				Example:
				
				
				public class Foo {
				void bar() {
				try {
				// do something
				}  catch (NullPointerException npe) {
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidCatchingThrowable" key="false" language="Java" name="PMD$AvoidCatchingThrowable" subtype="Rule">
            <description>A catch statement should never catch throwable since it includes errors</description>
        </metric>
        <metric full="AvoidConstantsInterface" key="false" name="PMD$AvoidConstantsInterface" subtype="Rule">
            <description> An interface should be used only to model a behavior of a class: using an interface as a container of constants is a poor usage pattern.
				
				This rule is defined by the following XPath expression:
				
				
				//ClassOrInterfaceDeclaration[@Interface="true"]
				[
				count(.//MethodDeclaration)=0
				and
				count(.//FieldDeclaration)&amp;gt;0
				]
				
				
				
				

				Example:
				
				
				
				public interface ConstantsInterface {
				public static final int CONSTANT1=0;
				public static final String CONSTANT2="1";
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidDeeplyNestedIfStmts" key="true" language="Java" name="PMD$AvoidDeeplyNestedIfStmts" subtype="Rule">
            <description>Deeply nested if..then statements are hard to read</description>
        </metric>
        <metric full="AvoidDollarSigns" key="false" language="Java" name="PMD$AvoidDollarSigns" subtype="Rule">
            <description>Avoid using dollar signs in variable/method/class/interface names</description>
        </metric>
        <metric full="AvoidDuplicateLiterals" key="false" language="Java" name="PMD$AvoidDuplicateLiterals" subtype="Rule">
            <description>The same String literal appears {0} times in this file; the first occurrence is on line {1}</description>
        </metric>
        <metric full="AvoidFieldNameMatchingMethodName" key="false" name="PMD$AvoidFieldNameMatchingMethodName" subtype="Rule">
            <description>It is somewhat confusing to have a field name with the same name as a method. While this is totally legal, having information (field) and actions (method) is not clear naming.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName
				
				

				Example:
				
				
				
				public class Foo {
				Object bar;
				// bar is data or an action or both?
				void bar() {
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidFieldNameMatchingTypeName" key="false" name="PMD$AvoidFieldNameMatchingTypeName" subtype="Rule">
            <description>It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and or field names could be more precise.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName
				
				

				Example:
				
				
				
				public class Foo extends Bar {
				// There's probably a better name for foo
				int foo;
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidInstanceofChecksInCatchClause" key="false" name="PMD$AvoidInstanceofChecksInCatchClause" subtype="Rule">
            <description>Each caught exception type should be handled in its own catch clause.
				
				This rule is defined by the following XPath expression:
				
				
				//CatchStatement/FormalParameter
				/following-sibling::Block//InstanceOfExpression/PrimaryExpression/PrimaryPrefix
				/Name[
				@Image = ./ancestor::Block/preceding-sibling::FormalParameter
				/VariableDeclaratorId/@Image
				]
				
				
				
				

				Example:
				
				
				
				try { // Avoid this
				// do something
				} catch (Exception ee) {
				if (ee instanceof IOException) {
				cleanup();
				}
				}
				try {  // Prefer this:
				// do something
				} catch (IOException ee) {
				cleanup();
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidInstantiatingObjectsInLoops" key="false" name="PMD$AvoidInstantiatingObjectsInLoops" subtype="Rule">
            <description>Detects when a new object is created inside a loop
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops
				
				

				Example:
				
				
				
				public class Something {
				public static void main( String as[] ) {  
				for (int i = 0; i &lt; 10; i++) {
				Foo f = new Foo(); //Avoid this whenever you can it's really expensive
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidPrintStackTrace" key="false" name="PMD$AvoidPrintStackTrace" subtype="Rule">
            <description>Avoid printStackTrace(); use a logger call instead.
				
				This rule is defined by the following XPath expression:
				
				//PrimaryExpression
				[PrimaryPrefix/Name[contains(@Image,'printStackTrace')]]
				[PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]
				
				
				
				

				Example:
				
				
				
				class Foo {
				void bar() {
				try {
				// do something
				} catch (Exception e) {
				e.printStackTrace();
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidProtectedFieldInFinalClass" key="false" name="PMD$AvoidProtectedFieldInFinalClass" subtype="Rule">
            <description>Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.
				
				This rule is defined by the following XPath expression:
				
				//ClassOrInterfaceDeclaration[@Final='true']
				/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
				/FieldDeclaration[@Protected='true']
				
				
				
				

				Example:
				
				
				
				public final class Bar {
				private int x;
				protected int y;  // &lt;-- Bar cannot be subclassed, so is y really private or package visible???
				Bar() {}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidReassigningParameters" key="false" name="PMD$AvoidReassigningParameters" subtype="Rule">
            <description>Reassigning values to parameters is a questionable practice. Use a temporary local variable instead.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.AvoidReassigningParameters
				
				

				Example:
				
				
				
				public class Foo {
				private void foo(String bar) {
				bar = "something else";
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidStringBufferField" key="false" name="PMD$AvoidStringBufferField" subtype="Rule">
            <description>StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="761084720"/>
            </examples>
        </metric>
        <metric full="AvoidSynchronizedAtMethodLevel" key="false" name="PMD$AvoidSynchronizedAtMethodLevel" subtype="Rule">
            <description> Method level synchronization can backfire when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.
				
				This rule is defined by the following XPath expression:
				
				
				//MethodDeclaration[@Synchronized='true']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				// Try to avoid this
				synchronized void foo() {
				}
				// Prefer this:
				void bar() {
				synchronized(this) {
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidThreadGroup" key="false" name="PMD$AvoidThreadGroup" subtype="Rule">
            <description>Avoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.
				
				This rule is defined by the following XPath expression:
				
				//AllocationExpression/ClassOrInterfaceType[contains(@Image,'ThreadGroup')] |
				//PrimarySuffix[contains(@Image, 'getThreadGroup')]
				
				
				
				

				Example:
				
				
				
				public class Bar {
				void buz() {
				ThreadGroup tg = new ThreadGroup("My threadgroup") ;
				tg = new ThreadGroup(tg, "my thread group");
				tg = Thread.currentThread().getThreadGroup();
				tg = System.getSecurityManager().getThreadGroup();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidThrowingNullPointerException" key="false" name="PMD$AvoidThrowingNullPointerException" subtype="Rule">
            <description>Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.
				
				This rule is defined by the following XPath expression:
				
				
				//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				throw new NullPointerException();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidThrowingRawExceptionTypes" key="false" name="PMD$AvoidThrowingRawExceptionTypes" subtype="Rule">
            <description>Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.
				
				This rule is defined by the following XPath expression:
				
				
				//AllocationExpression
				/ClassOrInterfaceType[
				@Image='Throwable' or
				@Image='Exception' or
				@Image='Error' or
				@Image='RuntimeException']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				public void bar() throws Exception {
				throw new Exception();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidUsingHardCodedIP" key="false" name="PMD$AvoidUsingHardCodedIP" subtype="Rule">
            <description>An application with hard coded IP may become impossible to deploy in some case. It never hurts to externalize IP adresses.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="-879920824"/>
            </examples>
        </metric>
        <metric full="AvoidUsingShortType" key="false" name="PMD$AvoidUsingShortType" subtype="Rule">
            <description>Java uses the 'short' type to reduce memory usage, not to optimize calculation. In fact, the jvm does not have any arithmetic capabilities for the short type: the jvm must convert the short into an int, do the proper caculation and convert the int back to a short. So, the use of the 'short' type may have a greater impact than memory usage.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="636384358"/>
            </examples>
        </metric>
        <metric full="AvoidUsingVolatile" key="false" name="PMD$AvoidUsingVolatile" subtype="Rule">
            <description>Use of the keyword 'volatile' is general used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="-839346987"/>
            </examples>
        </metric>
        <metric full="BadComparison" key="false" name="PMD$BadComparison" subtype="Rule">
            <description>Avoid equality comparisons with Double.NaN - these are likely to be logic errors.
				
				This rule is defined by the following XPath expression:
				
				
				//EqualityExpression[@Image='==']
				/PrimaryExpression/PrimaryPrefix
				/Name[@Image='Double.NaN' or @Image='Float.NaN']
				
				
				
				

				Example:
				
				
				
				public class Bar {
				boolean x = (y == Double.NaN);
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="BigIntegerInstantiation" key="false" name="PMD$BigIntegerInstantiation" subtype="Rule">
            <description>Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.basic.BigIntegerInstantiation
				
				

				Example:
				
				
				
				public class Test {
				
				public static void main(String[] args) {
				BigInteger bi=new BigInteger(1);
				BigInteger bi2=new BigInteger("0");
				BigInteger bi3=new BigInteger(0.0);
				BigInteger bi4;
				bi4=new BigInteger(0);
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="BooleanGetMethodName" key="false" name="PMD$BooleanGetMethodName" subtype="Rule">
            <description>Looks for methods named 'getX()' with 'boolean' as the return type. The convention is to name these methods 'isX()'.
				
				This rule is defined by the following XPath expression:
				
				
				//MethodDeclaration[
				MethodDeclarator[count(FormalParameters/FormalParameter) = 0 or $checkParameterizedMethods = 'true']
				[starts-with(@Image, 'get')]
				and
				ResultType/Type/PrimitiveType[@Image = 'boolean']
				]
				
				
				
				

				Example:
				
				
				
				public boolean getFoo(); // bad
				public boolean isFoo(); // ok
				public boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				checkParameterizedMethods 		</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="BooleanInstantiation" key="false" language="Java" name="PMD$BooleanInstantiation" subtype="Rule">
            <description>Avoid instantiating Boolean objects; you can usually invoke Boolean.valueOf() instead.</description>
        </metric>
        <metric full="BooleanInversion" key="false" name="PMD$BooleanInversion" subtype="Rule">
            <description>Use bitwise inversion to invert boolean values - it's the fastest way to do this. See http://www.javaspecialists.co.za/archive/newsletter.do?issue=042&amp;locale=en_US for specific details
				
				This rule is defined by the following XPath expression:
				
				
				//AssignmentOperator[@Image="="]/../Expression/UnaryExpressionNotPlusMinus[@Image="!"]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				public void main(bar) {
				boolean b = true;
				b = !b; // slow
				b ^= true; // fast
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="CallSuperInConstructor" key="false" name="PMD$CallSuperInConstructor" subtype="Rule">
            <description>It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.
				
				This rule is defined by the following XPath expression:
				
				
				//ClassOrInterfaceDeclaration[ count (ExtendsList/*) &amp;gt; 0 ]
				/ClassOrInterfaceBody
				/ClassOrInterfaceBodyDeclaration
				/ConstructorDeclaration[ count (.//ExplicitConstructorInvocation)=0 ]
				
				
				
				

				Example:
				
				
				
				public class Foo extends Bar{
				public Foo() {
				// call the constructor of Bar
				super();
				}
				public Foo(int code) {
				// do something with code
				this();
				// no problem with this
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ClassNamingConventionsRule" key="true" language="Java" name="PMD$ClassNamingConventions" subtype="Rule">
            <description>Class names should begin with an uppercase character and not include underscores</description>
        </metric>
        <metric full="ClassWithOnlyPrivateConstructorsShouldBeFinal" key="false" name="PMD$ClassWithOnlyPrivateConstructorsShouldBeFinal" subtype="Rule">
            <description>A class with only private constructors should be final, unless the private constructor is called by a inner class.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="658769007"/>
            </examples>
        </metric>
        <metric full="CloneThrowsCloneNotSupportedException" key="false" name="PMD$CloneThrowsCloneNotSupportedException" subtype="Rule">
            <description>The method clone() should throw a CloneNotSupportedException.
				
				This rule is defined by the following XPath expression:
				
				
				//MethodDeclaration
				[
				MethodDeclarator/@Image = 'clone'
				and count(MethodDeclarator/FormalParameters/*) = 0
				and count(NameList/Name[contains
				(@Image,'CloneNotSupportedException')]) = 0
				]
				[
				../../../../ClassOrInterfaceDeclaration[@Final = 'false']
				]
				
				
				
				

				Example:
				
				
				
				public class MyClass implements Cloneable{
				public Object clone() { // will cause an error
				MyClass clone = (MyClass)super.clone();
				return clone;
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="CompareObjectsWithEquals" key="false" name="PMD$CompareObjectsWithEquals" subtype="Rule">
            <description> Use equals() to compare object references; avoid comparing them with ==.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.CompareObjectsWithEquals
				
				

				Example:
				
				
				
				class Foo {
				boolean bar(String a, String b) {
				return a == b;
				}
				}
				
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ConfusingTernary" key="false" name="PMD$ConfusingTernary" subtype="Rule">
            <description>In an "if" expression with an "else" clause, avoid negation in the test. For example, rephrase: if (x != y) diff(); else same(); as: if (x == y) same(); else diff(); Most "if (x != y)" cases without an "else" are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as "does the error case go first?" or "does the common case go first?".
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.ConfusingTernary
				
				

				Example:
				
				
				
				public class Foo {
				boolean bar(int x, int y) {
				return (x != y) ? diff : same;
				}
				}          
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ConsecutiveLiteralAppends" key="false" name="PMD$ConsecutiveLiteralAppends" subtype="Rule">
            <description>Consecutively calling StringBuffer.append with String literals
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends
				
				

				Example:
				
				
				
				public class Foo {
				private void bar() {
				StringBuffer buf = new StringBuffer();
				buf.append("Hello").append(" ").append("World"); //bad
				buf.append("Hello World");//good
				}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				threshold 	1 	The report threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ConstructorCallsOverridableMethodRule" key="false" language="Java" name="PMD$ConstructorCallsOverridableMethod" subtype="Rule">
            <description>Avoid calls to overridable methods during construction</description>
        </metric>
        <metric full="CouplingBetweenObjectsRule" key="true" language="Java" name="PMD$CouplingBetweenObjects" subtype="Rule">
            <description>High amount of different objects as members denote a high coupling</description>
        </metric>
        <metric full="CyclomaticComplexityRuleMethod" key="true" language="Java" name="PMD$CyclomaticComplexity" subtype="Rule">
            <description>Cyclomatic complexity exceeded (n &gt; max) for method method name</description>
        </metric>
        <metric full="DefaultLabelNotLastInSwitchStmt" key="true" language="Java" name="PMD$DefaultLabelNotLastInSwitchStmt" subtype="Rule">
            <description>The default label should be the last label in a switch statement</description>
        </metric>
        <metric full="DefaultPackage" key="false" name="PMD$DefaultPackage" subtype="Rule">
            <description>Use explicit scoping instead of the default package private level.
				
				This rule is defined by the following XPath expression:
				
				//ClassOrInterfaceDeclaration[@Interface='false']
				/ClassOrInterfaceBody
				/ClassOrInterfaceBodyDeclaration
				[
				FieldDeclaration[@PackagePrivate='true']
				or MethodDeclaration[@PackagePrivate='true']
				]
				

</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="DoNotCallGarbageCollectionExplicitly" key="false" name="PMD$DoNotCallGarbageCollectionExplicitly" subtype="Rule">
            <description>Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="410002923"/>
            </examples>
        </metric>
        <metric full="DoNotCallSystemExit" key="false" name="PMD$DoNotCallSystemExit" subtype="Rule">
            <description>Web applications should not call System.exit(), since only the web container or the application server should stop the JVM.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="16969959"/>
            </examples>
        </metric>
        <metric full="DoubleCheckedLocking" key="false" name="PMD$DoubleCheckedLocking" subtype="Rule">
            <description>Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to. For more details see http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.DoubleCheckedLocking
				
				

				Example:
				
				
				
				public class Foo {
				Object baz;
				Object bar() {
				if(baz == null) { //baz may be non-null yet not fully created
				synchronized(this){
				if(baz == null){
				baz = new Object();
				}
				}
				}
				return baz;
				}
				}
				
				
			</description>
        </metric>
        <metric full="EmptyCatchBlock" key="false" language="Java" name="PMD$EmptyCatchBlock" subtype="Rule">
            <description>Avoid empty catch blocks</description>
        </metric>
        <metric full="EmptyFinalizer" key="false" language="Java" name="PMD$EmptyFinalizer" subtype="Rule">
            <description>Empty Finalizer Method</description>
        </metric>
        <metric full="EmptyIfStmt" key="true" language="Java" name="PMD$EmptyIfStmt" subtype="Rule">
            <description>Avoid empty 'if' statements</description>
        </metric>
        <metric full="EmptyStatementNotInLoop" key="false" language="Java" name="PMD$EmptyStatementNotInLoop" subtype="Rule">
            <description>An empty statement (semicolon) not part of a loop</description>
        </metric>
        <metric full="EmptyTryBlock" key="false" name="PMD$EmptyTryBlock" subtype="Rule">
            <description>Avoid empty try blocks - what's the point?
				
				This rule is defined by the following XPath expression:
				
				//TryStatement/Block[1][count(*) = 0]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				public void bar() {
				try {
				} catch (Exception e) {
				e.printStackTrace();
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="EmptyWhileStmt" key="true" language="Java" name="PMD$EmptyWhileStmt" subtype="Rule">
            <description>Avoid empty 'while' statements</description>
        </metric>
        <metric full="ExcessiveClassLength" key="true" language="Java" name="PMD$ExcessiveClassLength" subtype="Rule">
            <description>Avoid really long Classes</description>
        </metric>
        <metric full="ExcessiveImports" key="false" name="PMD$ExcessiveImports" subtype="Rule">
            <description>A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.ExcessiveImports
				
				

				Example:
				
				
				
				import blah.blah.Baz;
				import blah.blah.Bif;
				// 18 others from the same package elided
				public class Foo {
				public void doWork() {}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	30 	The import count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ExcessiveMethodLength" key="true" language="Java" name="PMD$ExcessiveMethodLength" subtype="Rule">
            <description>Avoid really long methods.</description>
        </metric>
        <metric full="ExcessiveParameterList" key="false" name="PMD$ExcessiveParameterList" subtype="Rule">
            <description>Long parameter lists can indicate that a new object should be created to wrap the numerous parameters. Basically, try to group the parameters together.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.LongParameterListRule
				
				

				Example:
				
				
				
				public class Foo {
				public void addData(
				int p0, int p1, int p2, int p3, int p4, int p5,
				int p5, int p6, int p7, int p8, int p9, int p10) {
				}
				}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	10 	The parameter count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ExcessivePublicCount" key="false" name="PMD$ExcessivePublicCount" subtype="Rule">
            <description>A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.ExcessivePublicCount
				
				

				Example:
				
				
				
				public class Foo {
				public String value;
				public Bar something;
				public Variable var;
				// [... more more public attributes ...]
				public void doWork() {}
				public void doMoreWork() {}
				public void doWorkAgain() {}
				// [... more more public methods ...]
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	45 	The public item reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="FinalFieldCouldBeStatic" key="false" language="Java" name="PMD$FinalFieldCouldBeStatic" subtype="Rule">
            <description>This final field could be made static</description>
        </metric>
        <metric full="FinalizeDoesNotCallSuperFinalize" key="false" language="Java" name="PMD$FinalizeDoesNotCallSuperFinalize" subtype="Rule">
            <description>Last statement in finalize method should be a call to super.finalize()</description>
        </metric>
        <metric full="FinalizeShouldBeProtected" key="false" language="Java" name="PMD$FinalizeShouldBeProtected" subtype="Rule">
            <description>Finalize Method has to be proctected.</description>
        </metric>
        <metric full="ForLoopShouldBeWhileLoop" key="false" language="Java" name="PMD$ForLoopShouldBeWhileLoop" subtype="Rule">
            <description>This for loop could be simplified to a while loop</description>
        </metric>
        <metric full="ForLoopsMustUseBraces" key="true" language="Java" name="PMD$ForLoopsMustUseBraces" subtype="Rule">
            <description>Avoid using 'for' statements without using curly braces.

This rule is defined by the following XPath expression:				
//ForStatement[not(Statement/Block)]

Example:

public void foo() {
    for (int i=0; i&lt;42;i++)
        foo();
}
</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="IfElseStmtsMustUseBracesRule" key="true" language="Java" name="PMD$IfElseStmtsMustUseBraces" subtype="Rule">
            <description>Avoid using 'if...else' statements without curly braces.

This rule is defined by the following XPath expression:
//Statement
[parent::IfStatement[@Else='true']]
[not(child::Block)]
[not(child::IfStatement)]

Example:

public void doSomething() {
    // this is OK
    if (foo) x++;
    // but this is not
    if (foo)
        x=x+1;
    else
        x=x-1;
}
</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="IfStmtsMustUseBraces" key="true" language="Java" name="PMD$IfStmtsMustUseBraces" subtype="Rule">
            <description>Avoid using if statements without using curly braces.
				
This rule is defined by the following XPath expression:
//IfStatement[count(*) &amp;lt; 3][not(Statement/Block)]

Example:

public class Foo {
    public void bar() {
        int x = 0;
        if (foo) x++;
    }
}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ImportFromSamePackage" key="false" name="PMD$ImportFromSamePackage" subtype="Rule">
            <description> No need to import a type that lives in the same package.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule
				
				

				Example:
				
				
				
				package foo;
				import foo.Buz; // no need for this
				import foo.*; // or this
				public class Bar{}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="InefficientEmptyStringCheck" key="false" name="PMD$InefficientEmptyStringCheck" subtype="Rule">
            <description>String.trim().length() is an inefficient way to check if a String is really empty, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck
				
				

				Example:
				
				
				
				public class Foo {
				void bar(String string) {
				if (string != null &amp;&amp; string.trim().size() &gt; 0) { 
				doSomething();
				} 
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="InefficientStringBuffering" key="false" name="PMD$InefficientStringBuffering" subtype="Rule">
            <description>Avoid concatenating non literals in a StringBuffer constructor or append().
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.InefficientStringBuffering
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				// Avoid this
				StringBuffer sb=new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));
				// use instead something like this
				StringBuffer sb = new StringBuffer("tmp = ");
				sb.append(System.getProperty("java.io.tmpdir"));
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="InsufficientStringBufferDeclaration" key="false" name="PMD$InsufficientStringBufferDeclaration" subtype="Rule">
            <description>Failing to pre-size a StringBuffer properly could cause it to re-size many times during runtime. This rule checks the characters that are actually passed into StringBuffer.append(), but represents a best guess "worst case" scenario. An empty StringBuffer constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				StringBuffer bad = new StringBuffer();
				bad.append("This is a long string, will exceed the default 16 characters");//bad 
				StringBuffer good = new StringBuffer(41);
				good.append("This is a long string, which is pre-sized");//good
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="IntegerInstantiation" key="false" name="PMD$IntegerInstantiation" subtype="Rule">
            <description>In JDK 1.5, calling new Integer() causes memory allocation. Integer.valueOf() is more memory friendly.
				
				This rule is defined by the following XPath expression:
				
				
				//PrimaryPrefix
				/AllocationExpression
				[not (ArrayDimsAndInits)
				and (ClassOrInterfaceType/@Image='Integer'
				or ClassOrInterfaceType/@Image='java.lang.Integer')]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="JumbledIncrementer" key="true" language="Java" name="PMD$JumbledIncrementer" subtype="Rule">
            <description>Avoid modifying an outer loop incrementer in an inner loop for update expression</description>
        </metric>
        <metric full="LooseCouplingRule" key="false" language="Java" name="PMD$LooseCoupling" subtype="Rule">
            <description>Avoid using implementation types like ''{0}''; use the interface instead</description>
        </metric>
        <metric full="MethodNamingConventions" key="true" language="Java" name="PMD$MethodNamingConventions" subtype="Rule">
            <description>Method name does not begin with a lower case character.</description>
        </metric>
        <metric full="MethodReturnsInternalArray" key="false" name="PMD$MethodReturnsInternalArray" subtype="Rule">
            <description>Exposing internal arrays directly allows the user to modify some code that could be critical. It is safer to return a copy of the array.

This rule is defined by the following Java class: net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray



				Example:

                
  
public class SecureSystem {
  UserData [] ud;
  public UserData [] getUserData() {
      // Don't return directly the internal array, return a copy
      return ud;
  }
}
  
      
            </description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="MethodWithSameNameAsEnclosingClass" key="false" name="PMD$MethodWithSameNameAsEnclosingClass" subtype="Rule">
            <description>Non-constructor methods should not have the same name as the enclosing class.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.MethodWithSameNameAsEnclosingClass
				
				

				Example:
				
				
				
				public class MyClass {
				// this is bad because it is a method
				public void MyClass() {}
				// this is OK because it is a constructor
				public MyClass() {}
				}
				
				
			</description>
        </metric>
        <metric full="MisplacedNullCheck" key="false" name="PMD$MisplacedNullCheck" subtype="Rule">
            <description> The null check here is misplaced. if the variable is null you'll get a NullPointerException. Either the check is useless (the variable will never be "null") or it's incorrect.
				
				This rule is defined by the following XPath expression:
				
				
				//Expression
				/*[self::ConditionalOrExpression or self::ConditionalAndExpression]
				/descendant::PrimaryExpression/PrimaryPrefix
				/Name[starts-with(@Image,
				concat(ancestor::PrimaryExpression/following-sibling::EqualityExpression
				[./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
				/PrimaryExpression/PrimaryPrefix
				/Name[count(../../PrimarySuffix)=0]/@Image,"."))
				]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				if (a.equals(baz) &amp;&amp; a != null) {}
				}
				}
				
				
				
				public class Foo {
				void bar() {
				if (a.equals(baz) || a == null) {}
				}
				}
				
			</description>
        </metric>
        <metric full="MissingBreakInSwitch" key="true" language="Java" name="PMD$MissingBreakInSwitch" subtype="Rule">
            <description>A switch statement without an enclosed break statement may be a bug.
				
				This rule is defined by the following XPath expression:
				
				
				//SwitchStatement
				[count(.//BreakStatement)=0]
				[count(SwitchLabel) &amp;gt; 0]
				[count(BlockStatement/Statement/ReturnStatement)
				+ count(BlockStatement/Statement/ThrowStatement)
				&amp;lt; count (SwitchLabel)]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				public void bar(int status) {
				switch(status) {
				case CANCELLED:
				doCancelled();
				// break; hm, should this be commented out?
				case NEW:
				doNew();
				case REMOVED:
				doRemoved();
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20low"/>
        </metric>
        <metric full="NcssConstructorCount" key="false" name="PMD$NcssConstructorCount" subtype="Rule">
            <description>This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.codesize.NcssConstructorCount
				
				

				Example:
				
				
				
				public class Foo extends Bar {
				public Foo() {
				super();
				
				
				
				
				
				//this constructor only has 1 NCSS lines
				super.foo();
				}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	100 	The constructor NCSS count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="NcssMethodCount" key="false" name="PMD$NcssMethodCount" subtype="Rule">
            <description>This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.codesize.NcssMethodCount
				
				

				Example:
				
				
				
				public class Foo extends Bar {
				public int methd() {
				super.methd();
				
				
				
				
				
				//this method only has 1 NCSS lines
				return 1;
				}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	100 	The method NCSS count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="NcssTypeCount" key="false" name="PMD$NcssTypeCount" subtype="Rule">
            <description>This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.codesize.NcssTypeCount
				
				

				Example:
				
				
				
				public class Foo extends Bar {
				public Foo() {
				//this class only has 6 NCSS lines
				super();
				
				
				
				
				
				super.foo();
				}
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				minimum 	1500 	The type NCSS count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="NonStaticInitializer" key="false" name="PMD$NonStaticInitializer" subtype="Rule">
            <description>A nonstatic initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.
				
				This rule is defined by the following XPath expression:
				
				//Initializer[@Static='false']
				
				
				
				

				Example:
				
				
				
				public class MyClass {
				// this block gets run before any call to a constructor
				{
				System.out.println("I am about to construct myself");
				}
				}
				
				
			</description>
        </metric>
        <metric full="NonThreadSafeSingleton" key="false" name="PMD$NonThreadSafeSingleton" subtype="Rule">
            <description>Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom). See Effective Java, item 48.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.NonThreadSafeSingleton
				
				

				Example:
				
				
				private static Foo foo = null;
				
				//multiple simultaneous callers may see partially initialized objects
				public static Foo getFoo() {
				if (foo==null)
				foo = new Foo();
				return foo;
				}
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				checkNonStaticMethods 		Do not set this to false and checkNonStaticFields to true
				checkNonStaticFields 		Do not set this to true and checkNonStaticMethods to false</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="NullAssignment" key="false" language="Java" name="PMD$NullAssignment" subtype="Rule">
            <description>Assigning an Object to null is a code smell. Consider refactoring.</description>
        </metric>
        <metric full="OptimizableToArrayCall" key="false" name="PMD$OptimizableToArrayCall" subtype="Rule">
            <description>A call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.
				
				This rule is defined by the following XPath expression:
				
				
				//PrimaryExpression
				[PrimaryPrefix/Name[ends-with(@Image, 'toArray')]]
				[
				PrimarySuffix/Arguments/ArgumentList/Expression
				/PrimaryExpression/PrimaryPrefix/AllocationExpression
				/ArrayDimsAndInits/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='0']
				]
				
				
				
				
				

				Example:
				
				
				
				class Foo {
				void bar(Collection x) {
				// A bit inefficient
				x.toArray(new Foo[0]);
				// Much better; this one sizes the destination array, avoiding
				// a reflection call in some Collection implementations
				x.toArray(new Foo[x.size()]);
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="OverrideBothEqualsAndHashcode" key="true" language="Java" name="PMD$OverrideBothEqualsAndHashcode" subtype="Rule">
            <description>Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode
				
				

				Example:
				
				
				
				// this is bad
				public class Bar {
				public boolean equals(Object o) {
				// do some comparison
				}
				}
				
				// and so is this
				public class Baz {
				public int hashCode() {
				// return some hash value
				}
				}
				
				// this is OK
				public class Foo {
				public boolean equals(Object other) {
				// do some comparison
				}
				public int hashCode() {
				// return some hash value
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="PositionLiteralsFirstInComparisons" key="false" name="PMD$PositionLiteralsFirstInComparisons" subtype="Rule">
            <description> Position literals first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false.
				
				This rule is defined by the following XPath expression:
				
				
				//PrimaryExpression[PrimaryPrefix[Name[ends-with(@Image, '.equals')]][..//Literal]]
				[not(ancestor::Expression/ConditionalAndExpression//EqualityExpression[@Image='!=']//NullLiteral)]
				[not(ancestor::Expression/ConditionalOrExpression//EqualityExpression[@Image='==']//NullLiteral)]
				
				
				
				

				Example:
				
				
				
				class Foo {
				boolean bar(String x) {
				return x.equals("2"); // should be "2".equals(x)
				}
				}
				
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ProperCloneImplementationRule" key="false" language="Java" name="PMD$ProperCloneImplementation" subtype="Rule">
            <description>Object clone() should be implemented with super.clone()</description>
        </metric>
        <metric full="ReplaceHashtableWithMap" key="false" name="PMD$ReplaceHashtableWithMap" subtype="Rule">
            <description> Consider replacing this Hashtable with the newer java.util.Map
				
				This rule is defined by the following XPath expression:
				
				
				//Type/ReferenceType/ClassOrInterfaceType[@Image='Hashtable']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				Hashtable h = new Hashtable();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ReplaceVectorWithList" key="false" name="PMD$ReplaceVectorWithList" subtype="Rule">
            <description> Consider replacing Vector usages with the newer java.util.ArrayList if expensive threadsafe operation is not required.
				
				This rule is defined by the following XPath expression:
				
				//Type/ReferenceType/ClassOrInterfaceType[@Image='Vector']
				
				
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				Vector v = new Vector();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="ReturnEmptyArrayRatherThanNull" key="false" name="PMD$ReturnEmptyArrayRatherThanNull" subtype="Rule">
            <description>For any method that returns an array, it's a better behavior to return an empty array rather than a null reference.</description>
            <optiontrustworthiness value="very%20high"/>
            <examples>
                <examplesolution exampleid="-714170688"/>
            </examples>
        </metric>
        <metric full="ReturnFromFinallyBlock" key="false" language="Java" name="PMD$ReturnFromFinallyBlock" subtype="Rule">
            <description>Avoid returning from a finally block</description>
        </metric>
        <metric full="ShortMethodName" key="false" name="PMD$ShortMethodName" subtype="Rule">
            <description>Detects when very short method names are used.
				
				This rule is defined by the following XPath expression:
				
				
				//MethodDeclarator[string-length(@Image) &amp;lt; 3]
				
				
				
				

				Example:
				
				
				
				public class ShortMethod {
				public void a( int i ) { // Violation
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SignatureDeclareThrowsException" key="false" name="PMD$SignatureDeclareThrowsException" subtype="Rule">
            <description>It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration
				
				

				Example:
				
				
				
				public void methodThrowingException() throws Exception {
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SimpleDateFormatNeedsLocale" key="false" name="PMD$SimpleDateFormatNeedsLocale" subtype="Rule">
            <description>Be sure to specify a Locale when creating a new instance of SimpleDateFormat.
				
				This rule is defined by the following XPath expression:
				
				//AllocationExpression
				[ClassOrInterfaceType[@Image='SimpleDateFormat']]
				[Arguments[@ArgumentCount=1]]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				// Should specify Locale.US (or whatever)
				private SimpleDateFormat sdf = new SimpleDateFormat("pattern");
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SimplifyBooleanExpressions" key="false" name="PMD$SimplifyBooleanExpressions" subtype="Rule">
            <description>Avoid unnecessary comparisons in boolean expressions - this complicates simple code.
				
				This rule is defined by the following XPath expression:
				
				//EqualityExpression/PrimaryExpression
				/PrimaryPrefix/Literal/BooleanLiteral
				
				
				
				

				Example:
				
				
				
				public class Bar {
				// can be simplified to
				// bar = isFoo();
				private boolean bar = (isFoo() == true);
				
				public isFoo() { return false;}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SimplifyBooleanReturnsRule" key="false" language="Java" name="PMD$SimplifyBooleanReturns" subtype="Rule">
            <description>Avoid unnecessary if..then..else statements when returning a boolean</description>
        </metric>
        <metric full="SimplifyConditional" key="false" name="PMD$SimplifyConditional" subtype="Rule">
            <description>No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.
				
				This rule is defined by the following XPath expression:
				
				
				//Expression
				[ConditionalOrExpression
				[EqualityExpression[@Image='==']
				//NullLiteral
				and
				UnaryExpressionNotPlusMinus
				[@Image='!']//InstanceOfExpression[PrimaryExpression
				//Name/@Image = ancestor::ConditionalOrExpression/EqualityExpression
				/PrimaryExpression/PrimaryPrefix/Name/@Image]]
				or
				ConditionalAndExpression
				[EqualityExpression[@Image='!=']//NullLiteral
				and
				InstanceOfExpression
				[PrimaryExpression[count(PrimarySuffix[@ArrayDereference='true'])=0]
				//Name/@Image = ancestor::ConditionalAndExpression
				/EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]]]
				
				
				
				

				Example:
				
				
				
				class Foo {
				void bar(Object x) {
				if (x != null &amp;&amp; x instanceof Bar) {
				// just drop the "x != null" check
				}
				}
				}      
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SimplifyStartsWith" key="false" name="PMD$SimplifyStartsWith" subtype="Rule">
            <description>Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.
				
				This rule is defined by the following XPath expression:
				
				//PrimaryExpression
				[PrimaryPrefix/Name
				[ends-with(@Image, '.startsWith')]]
				[PrimarySuffix/Arguments/ArgumentList
				/Expression/PrimaryExpression/PrimaryPrefix
				/Literal
				[string-length(@Image)=3]
				[starts-with(@Image, '"')]
				[ends-with(@Image, '"')]
				]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				boolean checkIt(String x) {
				return x.startsWith("a");
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SingularField" key="false" name="PMD$SingularField" subtype="Rule">
            <description>A field that's only used by one method could perhaps be replaced by a local variable.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.SingularField
				
				

				Example:
				
				
				
				public class Foo {
				private int x;
				public void foo(int y) {
				x = y + 5;
				return x;
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="AvoidStringInstantiationRule" key="false" language="Java" name="PMD$StringInstantiation" subtype="Rule">
            <description>Avoid instantiating String objects; this is usually unnecessary.</description>
        </metric>
        <metric full="SwitchDensity" key="true" language="Java" name="PMD$SwitchDensity" subtype="Rule">
            <description>A high ratio of statements to labels in a switch statement. Consider refactoring.</description>
        </metric>
        <metric full="SwitchStmtsShouldHaveDefault" key="false" language="Java" name="PMD$SwitchStmtsShouldHaveDefault" subtype="Rule">
            <description>Switch statements should have a default label.

This rule is defined by the following XPath expression:
//SwitchStatement[not(SwitchLabel[@Default='true'])]

Example:

public class Foo {
    public void bar() {
        int x = 2;
        switch (x) {
            case 2: int j = 8;
        }
    }
}
						</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="SystemPrintln" key="false" name="PMD$SystemPrintln" subtype="Rule">
            <description>System.(out|err).print is used, consider using a logger.
				
				This rule is defined by the following XPath expression:
				
				
				//Name[
				starts-with(@Image, 'System.out.print')
				or
				starts-with(@Image, 'System.err.print')
				]
				
				
				
				

				Example:
				
				
				
				class Foo{
				Logger log = Logger.getLogger(Foo.class.getName());
				public void testA () {
				System.out.println("Entering test");
				// Better use this
				log.fine("Entering test");
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="TooFewBranchesForASwitchStatement" key="false" name="PMD$TooFewBranchesForASwitchStatement" subtype="Rule">
            <description>Swith are designed complex branches, and allow branches to share treatement. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability.</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="TooManyFields" key="false" name="PMD$TooManyFields" subtype="Rule">
            <description>Classes that have too many fields could be redesigned to have fewer fields, possibly through some nested object grouping of some of the information. For example, a class with city/state/zip fields could instead have one Address field.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.TooManyFields
				
				

				Example:
				
				
				
				public class Person {
				String one;
				int two;
				int three;
				[... many more public fields ...]
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				maxfields 	15 	The field count reporting threshold</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="TooManyMethods" key="false" language="Java" name="PMD$TooManyMethods" subtype="Rule">
            <description>A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects. (default: number of methods &gt;= 10)</description>
            <optiontrustworthiness value="medium"/>
        </metric>
        <metric full="UncommentedEmptyConstructor" key="false" name="PMD$UncommentedEmptyConstructor" subtype="Rule">
            <description>Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.
				
				This rule is defined by the following XPath expression:
				
				
				//ConstructorDeclaration[@Private='false'][count(BlockStatement) = 0 and ($ignoreExplicitConstructorInvocation = 'true' or not(ExplicitConstructorInvocation)) and @containsComment = 'false']
				
				
				
				

				Example:
				
				
				
				public Foo() {
				super();
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				ignoreExplicitConstructorInvocation 		Ignore explicit constructor invocation when deciding whether constructor is empty or not</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UncommentedEmptyMethod" key="false" name="PMD$UncommentedEmptyMethod" subtype="Rule">
            <description>Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.
				
				This rule is defined by the following XPath expression:
				
				
				//MethodDeclaration/Block[count(BlockStatement) = 0 and @containsComment = 'false']
				
				
				
				

				Example:
				
				
				
				public void doSomething() {
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnnecessaryConversionTemporaryRule" key="false" language="Java" name="PMD$UnnecessaryConversionTemporary" subtype="Rule">
            <description>Avoid unnecessary temporaries when converting primitives to Strings</description>
        </metric>
        <metric full="UnnecessaryFinalModifier" key="false" name="PMD$UnnecessaryFinalModifier" subtype="Rule">
            <description>When a class has the final modifier, all the methods are automatically final.
				
				This rule is defined by the following XPath expression:
				
				
				//ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']
				/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']
				
				
				
				

				Example:
				
				
				
				public final class Foo {
				// This final modifier is not necessary, since the class is final
				// and thus, all methods are final
				private final void foo() {
				}
				}
				
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnnecessaryLocalBeforeReturn" key="false" name="PMD$UnnecessaryLocalBeforeReturn" subtype="Rule">
            <description>Avoid unnecessarily creating local variables
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn
				
				

				Example:
				
				
				
				public class Foo {
				public int foo() {
				int x = doSomething();
				return x;  // instead, just 'return doSomething();'
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnnecessaryReturn" key="false" language="Java" name="PMD$UnnecessaryReturn" subtype="Rule">
            <description>Avoid unnecessary return statements</description>
        </metric>
        <metric full="UnnecessaryWrapperObjectCreation" key="false" name="PMD$UnnecessaryWrapperObjectCreation" subtype="Rule">
            <description>Parsing method should be called directy instead.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation
				
				

				Example:
				
				
				
				public int convert(String s) {
				int i, i2;
				
				i = Integer.valueOf(s).intValue(); // this wastes an object
				i = Integer.parseInt(s); // this is better
				
				i2 = Integer.valueOf(i).intValue(); // this wastes an object
				i2 = i; // this is better
				
				return i2;
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnusedFormalParameter" key="false" name="PMD$UnusedFormalParameter" subtype="Rule">
            <description>Avoid passing parameters to methods or constructors and then not using those parameters.

This rule is defined by the following Java class: net.sourceforge.pmd.rules.UnusedFormalParameterRule



				Example:

                

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    
            </description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnusedLocalVariable" key="false" name="PMD$UnusedLocalVariable" subtype="Rule">
            <description>Detects when a local variable is declared and/or assigned, but not used.

This rule is defined by the following Java class: net.sourceforge.pmd.rules.UnusedLocalVariableRule



				Example:

                

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    
            </description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UnusedModifier" key="false" name="PMD$UnusedModifier" subtype="Rule">
            <description> Fields in interfaces are automatically public static final, and methods are public abstract. Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static). For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.UnusedModifier
				
				

				Example:
				
				
				
				public interface Foo {
				public abstract void bar(); // both abstract and public are ignored by the compiler
				public static final int X = 0; // public, static, and final all ignored
				public static class Bar {} // public, static ignored
				public static interface Baz {} // ditto
				}
				public class Bar {
				public static interface Baz {} // static ignored
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="PrivateFieldNotUsed" key="false" language="Java" name="PMD$UnusedPrivateField" subtype="Rule">
            <description>Avoid unused private fields such as ''{0}''</description>
        </metric>
        <metric full="UnusedPrivateMethod" key="false" language="Java" name="PMD$UnusedPrivateMethod" subtype="Rule">
            <description>Avoid unused private methods such as ''{0}''</description>
        </metric>
        <metric full="UseArraysAsList" key="false" name="PMD$UseArraysAsList" subtype="Rule">
            <description> The class java.util.Arrays has a "asList" method that should be use when you want to create a new List from an array of objects. It is faster than executing a loop to cpy all the elements of the array one by one
				
				This rule is defined by the following XPath expression:
				
				
				//Statement[
				(ForStatement) and (count(.//IfStatement)=0)
				]
				//StatementExpression[
				PrimaryExpression/PrimaryPrefix/Name[
				substring-before(@Image,'.add') = ancestor::MethodDeclaration//LocalVariableDeclaration[
				./Type//ClassOrInterfaceType[
				@Image = 'Collection' or 
				@Image = 'List' or @Image='ArrayList'
				]
				]
				/VariableDeclarator/VariableDeclaratorId[
				count(..//AllocationExpression/ClassOrInterfaceType[
				@Image="ArrayList"
				]
				)=1
				]/@Image
				]
				and
				PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
				[@Image = ancestor::MethodDeclaration//LocalVariableDeclaration
				[@Array="true"]/VariableDeclarator/VariableDeclaratorId/@Image]
				/../..[count(.//PrimarySuffix)
				=1]/PrimarySuffix/Expression/PrimaryExpression/PrimaryPrefix
				/Name
				]
				
				
				
				

				Example:
				
				
				
				public class Test {
				public void foo(Integer[] ints) {
				// could just use Arrays.asList(ints)
				List l= new ArrayList(10);
				for (int i=0; i&lt; 100; i++) {
				l.add(ints[i]);
				}
				for (int i=0; i&lt; 100; i++) {
				l.add(a[i].toString()); // won't trigger the rule
				}
				}
				}
				
				
			</description>
        </metric>
        <metric full="UseCollectionIsEmpty" key="false" name="PMD$UseCollectionIsEmpty" subtype="Rule">
            <description>The isEmpty() method on java.util.Collection is provided to see if a collection has any elements. Comparing the value of size() to 0 merely duplicates existing behavior.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.design.UseCollectionIsEmpty
				
				

				Example:
				
				
				
				public class Foo {
				void good() {
				List foo = getList();
				if (foo.isEmpty()) {
				// blah
				}
				}
				
				void bad() {
				List foo = getList();
				if (foo.size() == 0) {
				// blah
				}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UseCorrectExceptionLogging" key="false" name="PMD$UseCorrectExceptionLogging" subtype="Rule">
            <description>To make sure the full stacktrace is printed out, use the logging statement with 2 arguments: a String and a Throwable.
				
				This rule is defined by the following XPath expression:
				
				//CatchStatement/Block/BlockStatement/Statement/StatementExpression
				/PrimaryExpression[PrimaryPrefix/Name[starts-with(@Image,
				concat(ancestor::ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration
				[Type//ClassOrInterfaceType[@Image='Log']]
				/VariableDeclarator/VariableDeclaratorId/@Image, '.'))]]
				[PrimarySuffix/Arguments[@ArgumentCount='1']]
				[PrimarySuffix/Arguments//Name/@Image = ancestor::CatchStatement/FormalParameter/VariableDeclaratorId/@Image]
				
				
				

				Example:
				
				
				public class Main {
				private static final Log _LOG = LogFactory.getLog( Main.class );
				void bar() {
				try {
				} catch( Exception e ) {
				_LOG.error( e ); //Wrong!
				} catch( OtherException oe ) {
				_LOG.error( oe.getMessage(), oe ); //Correct
				}
				}
				}
				
				
				
				ProperLogger
				
				A logger should normally be defined private static final and have the correct class. Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.
				
				This rule is defined by the following XPath expression:
				
				
				//ClassOrInterfaceBodyDeclaration[FieldDeclaration//ClassOrInterfaceType[@Image='Log']
				and
				not(FieldDeclaration[@Final='true'][@Static='true'][@Private='true'][.//VariableDeclaratorId[@Image=$staticLoggerName]]
				//ArgumentList//ClassOrInterfaceType/@Image = ancestor::ClassOrInterfaceDeclaration/@Image)
				and
				not(FieldDeclaration[@Final='true'][@Private='true'][.//VariableDeclaratorId[@Image='log']]
				[count(.//VariableInitializer)=0]
				[ancestor::ClassOrInterfaceBody//StatementExpression[.//PrimaryExpression/descendant::*[@Image='log']][count(.//AllocationExpression)=0]]
				)]
				
				
				
				public class Foo {
				// right
				private static final Log LOG = LogFactory.getLog(Foo.class);
				// wrong
				protected Log LOG = LogFactory.getLog(Testclass.class);
				}
				
				
				
				
				This rule has the following properties:
				Name	Default value	Description
				staticLoggerName 		</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UseEqualsToCompareStrings" key="true" language="Java" name="PMD$UseEqualsToCompareStrings" subtype="Rule">
            <description>Using '==' or '!=' to compare strings only works if intern version is used on both sides.</description>
        </metric>
        <metric full="UseIndexOfChar" key="false" name="PMD$UseIndexOfChar" subtype="Rule">
            <description>Use String.indexOf(char) when checking for the index of a single character; it executes faster.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.UseIndexOfChar
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				String s = "hello world";
				// avoid this
				if (s.indexOf("d") {}
				// instead do this
				if (s.indexOf('d') {}
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UseLocaleWithCaseConversions" key="false" name="PMD$UseLocaleWithCaseConversions" subtype="Rule">
            <description>When doing a String.toLowerCase()/toUpperCase() call, use a Locale. This avoids problems with certain locales, i.e. Turkish.
				
				This rule is defined by the following XPath expression:
				
				
				//PrimaryExpression
				[PrimaryPrefix/Name
				[ends-with(@Image, 'toLowerCase') or ends-with(@Image,
				'toUpperCase')]
				]
				[PrimarySuffix[position() = 1]/Arguments[@ArgumentCount=0]]
				
				
				
				

				Example:
				
				
				
				class Foo {
				// BAD
				if (x.toLowerCase().equals("list"))...
				/*
				This will not match "LIST" when in Turkish locale
				The above could be
				if (x.toLowerCase(Locale.US).equals("list")) ...
				or simply
				if (x.equalsIgnoreCase("list")) ...
				*/
				// GOOD
				String z = a.toLowerCase(Locale.EN);
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UseNotifyAllInsteadOfNotify" key="false" name="PMD$UseNotifyAllInsteadOfNotify" subtype="Rule">
            <description>Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.
				
				This rule is defined by the following XPath expression:
				
				
				//StatementExpression/PrimaryExpression
				[count(PrimarySuffix/Arguments/ArgumentList) = 0]
				[
				PrimaryPrefix[./Name[@Image='notify' or ends-with(@Image,'.notify')]
				or @Image='notify'
				or (./AllocationExpression and ../PrimarySuffix[@Image='notify'])
				]
				]
				
				
				
				

				Example:
				
				
				
				public class Foo {
				void bar() {
				x.notify();
				// If many threads are monitoring x, only one (and you won't know which) will be notified.
				// use instead:
				x.notifyAll();
				}
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="UseSingletonRule" key="true" language="Java" name="PMD$UseSingleton" subtype="Rule">
            <description>All methods are static. Consider using Singleton instead. Alternatively, you could add a private constructor to silence this warning.</description>
        </metric>
        <metric full="UselessStringValueOf" key="false" name="PMD$UselessStringValueOf" subtype="Rule">
            <description>No need to call String.valueOf to append to a string; just use the valueOf() argument directly.
				
				This rule is defined by the following Java class: net.sourceforge.pmd.rules.strings.UselessStringValueOf
				
				

				Example:
				
				
				
				public String convert(int i) {
				String s;
				s = "a" + String.valueOf(i); // Bad
				s = "a" + i; // Better
				return s;
				}
				
				
			</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
        <metric full="VariableNamingConventionsRule" key="true" language="Java" name="PMD$VariableNamingConventions" subtype="Rule">
            <description>Unconventional name of variable.</description>
        </metric>
        <metric full="WhileLoopsMustUseBraces" key="true" language="Java" name="PMD$WhileLoopsMustUseBraces" subtype="Rule">
            <description>Avoid using 'while' statements without using curly braces.

This rule is defined by the following XPath expression:
//WhileStatement[not(Statement/Block)]

Example:

public void doSomething() 
{
    while (true)
        x++;
}
</description>
            <optiontrustworthiness value="very%20high"/>
        </metric>
    </qualityelements>
    <qualityhierarchy>
        <item child="QM"/>
        <item child="EFF" parent="QM"/>
        <item child="EFFCO" parent="EFF"/>
        <item child="RES" parent="EFF"/>
        <item child="ExcessiveParameterNumber" parent="RES"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck" parent="ExcessiveParameterNumber"/>
        <item child="PMD$ExcessiveParameterList" parent="ExcessiveParameterNumber"/>
        <item child="Field%20should%20be%20static" parent="RES"/>
        <item child="FindBugs$SS_SHOULD_BE_STATIC" parent="Field%20should%20be%20static"/>
        <item child="PMD$FinalFieldCouldBeStatic" parent="Field%20should%20be%20static"/>
        <item child="Instantiation%20of%20java.lang.Boolean" parent="RES"/>
        <item child="FindBugs$DM_BOOLEAN_CTOR" parent="Instantiation%20of%20java.lang.Boolean"/>
        <item child="PMD$BooleanInstantiation" parent="Instantiation%20of%20java.lang.Boolean"/>
        <item child="Instantiation%20of%20java.lang.String" parent="RES"/>
        <item child="FindBugs$DM_STRING_CTOR" parent="Instantiation%20of%20java.lang.String"/>
        <item child="FindBugs$DM_STRING_VOID_CTOR" parent="Instantiation%20of%20java.lang.String"/>
        <item child="PMD$StringInstantiation" parent="Instantiation%20of%20java.lang.String"/>
        <item child="Unused%20private%20field" parent="RES"/>
        <item child="FindBugs$UUF_UNUSED_FIELD" parent="Unused%20private%20field"/>
        <item child="PMD$UnusedPrivateField" parent="Unused%20private%20field"/>
        <item child="Unused%20private%20method" parent="RES"/>
        <item child="FindBugs$UPM_UNCALLED_PRIVATE_METHOD" parent="Unused%20private%20method"/>
        <item child="PMD$UnusedPrivateMethod" parent="Unused%20private%20method"/>
        <item child="FindBugs$DM_BOXED_PRIMITIVE_TOSTRING" parent="RES"/>
        <item child="FindBugs$DM_NEW_FOR_GETCLASS" parent="RES"/>
        <item child="FindBugs$ISC_INSTANTIATE_STATIC_CLASS" justificationid="-549859193" parent="RES"/>
        <item child="FindBugs$ODR_OPEN_DATABASE_RESOURCE" parent="RES"/>
        <item child="FindBugs$ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH" justificationid="-1387457857" parent="RES"/>
        <item child="FindBugs$OS_OPEN_STREAM" parent="RES"/>
        <item child="FindBugs$OS_OPEN_STREAM_EXCEPTION_PATH" parent="RES"/>
        <item child="FindBugs$URF_UNREAD_FIELD" parent="RES"/>
        <item child="PMD$AvoidInstantiatingObjectsInLoops" parent="RES"/>
        <item child="PMD$AvoidStringBufferField" parent="RES"/>
        <item child="PMD$AvoidUsingVolatile" parent="RES"/>
        <item child="PMD$BigIntegerInstantiation" parent="RES"/>
        <item child="PMD$IntegerInstantiation" parent="RES"/>
        <item child="PMD$SingularField" parent="RES"/>
        <item child="PMD$UnnecessaryConversionTemporary" parent="RES"/>
        <item child="PMD$UnnecessaryLocalBeforeReturn" parent="RES"/>
        <item child="PMD$UnnecessaryWrapperObjectCreation" parent="RES"/>
        <item child="PMD$UnusedLocalVariable" parent="RES"/>
        <item child="PMD$UseSingleton" parent="RES"/>
        <item child="TIME" parent="EFF"/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="TIME"/>
        <item child="FindBugs$BC_IMPOSSIBLE_INSTANCEOF" parent="Always%20same%20result%20for%20boolean%20expression"/>
        <item child="FindBugs$BC_VACUOUS_INSTANCEOF" parent="Always%20same%20result%20for%20boolean%20expression"/>
        <item child="FindBugs$EC_NULL_ARG" parent="Always%20same%20result%20for%20boolean%20expression"/>
        <item child="ExcessiveParameterNumber" parent="TIME"/>
        <item child="Instantiation%20of%20java.lang.Boolean" parent="TIME"/>
        <item child="Instantiation%20of%20java.lang.String" parent="TIME"/>
        <item child="Unused%20private%20field" parent="TIME"/>
        <item child="FindBugs$DM_BOXED_PRIMITIVE_TOSTRING" parent="TIME"/>
        <item child="FindBugs$DM_GC" parent="TIME"/>
        <item child="FindBugs$DM_STRING_EMPTY_EQUALS" parent="TIME"/>
        <item child="FindBugs$DM_STRING_TOSTRING" parent="TIME"/>
        <item child="FindBugs$DM_USELESS_THREAD" parent="TIME"/>
        <item child="FindBugs$ESync_EMPTY_SYNC" parent="TIME"/>
        <item child="FindBugs$NO_NOTIFY_NOT_NOTIFYALL" parent="TIME"/>
        <item child="FindBugs$RS_READOBJECT_SYNC" parent="TIME"/>
        <item child="FindBugs$SBSC_USE_STRINGBUFFER_CONCATENATION" parent="TIME"/>
        <item child="FindBugs$SWL_SLEEP_WITH_LOCK_HELD" parent="TIME"/>
        <item child="PMD$AddEmptyString" parent="TIME"/>
        <item child="PMD$AppendCharacterWithChar" parent="TIME"/>
        <item child="PMD$AvoidArrayLoops" parent="TIME"/>
        <item child="PMD$AvoidInstanceofChecksInCatchClause" parent="TIME"/>
        <item child="PMD$AvoidInstantiatingObjectsInLoops" parent="TIME"/>
        <item child="PMD$AvoidUsingShortType" parent="TIME"/>
        <item child="PMD$BooleanInversion" parent="TIME"/>
        <item child="PMD$ConsecutiveLiteralAppends" parent="TIME"/>
        <item child="PMD$InefficientEmptyStringCheck" parent="TIME"/>
        <item child="PMD$InefficientStringBuffering" parent="TIME"/>
        <item child="PMD$InsufficientStringBufferDeclaration" parent="TIME"/>
        <item child="PMD$OptimizableToArrayCall" parent="TIME"/>
        <item child="PMD$SimplifyConditional" parent="TIME"/>
        <item child="PMD$SimplifyStartsWith" parent="TIME"/>
        <item child="PMD$UnnecessaryConversionTemporary" parent="TIME"/>
        <item child="PMD$UnnecessaryLocalBeforeReturn" parent="TIME"/>
        <item child="PMD$UseArraysAsList" parent="TIME"/>
        <item child="PMD$UseCollectionIsEmpty" parent="TIME"/>
        <item child="PMD$UseIndexOfChar" parent="TIME"/>
        <item child="PMD$UselessStringValueOf" parent="TIME"/>
        <item child="MAINT" parent="QM"/>
        <item child="CHANG" parent="MAINT"/>
        <item child="Case%20statement%20should%20have%20break" parent="CHANG"/>
        <item child="FindBugs$SF_SWITCH_FALLTHROUGH" parent="Case%20statement%20should%20have%20break"/>
        <item child="PMD$MissingBreakInSwitch" parent="Case%20statement%20should%20have%20break"/>
        <item child="Class%20too%20large" parent="CHANG"/>
        <item child="PMD$ExcessiveClassLength" parent="Class%20too%20large"/>
        <item child="EncapsulationViolation" parent="CHANG"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck" parent="EncapsulationViolation"/>
        <item child="ExcessiveMethodNumber" parent="CHANG"/>
        <item child="PMD$TooManyMethods" parent="ExcessiveMethodNumber"/>
        <item child="ExcessiveParameterNumber" parent="CHANG"/>
        <item child="LowCommentRatio" parent="CHANG"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck" parent="LowCommentRatio"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck" parent="LowCommentRatio"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck" parent="LowCommentRatio"/>
        <item child="Method%20too%20long" parent="CHANG"/>
        <item child="PMD$ExcessiveMethodLength" parent="Method%20too%20long"/>
        <item child="No%20assignment%20in%20expressions" parent="CHANG"/>
        <item child="PMD$AssignmentInOperand" parent="No%20assignment%20in%20expressions"/>
        <item child="Redefining%20symbols" parent="CHANG"/>
        <item child="FindBugs$MF_CLASS_MASKS_FIELD" parent="Redefining%20symbols"/>
        <item child="FindBugs$MF_METHOD_MASKS_FIELD" parent="Redefining%20symbols"/>
        <item child="UnfinishedCode" parent="CHANG"/>
        <item child="Checkstyle$com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck" parent="UnfinishedCode"/>
        <item child="PMD$AtLeastOneConstructor" parent="CHANG"/>
        <item child="PMD$AvoidDeeplyNestedIfStmts" justificationid="-1526217090" parent="CHANG"/>
        <item child="PMD$AvoidDuplicateLiterals" justificationid="715407962" parent="CHANG"/>
        <item child="PMD$AvoidReassigningParameters" parent="CHANG"/>
        <item child="PMD$AvoidSynchronizedAtMethodLevel" parent="CHANG"/>
        <item child="PMD$ConfusingTernary" parent="CHANG"/>
        <item child="PMD$CyclomaticComplexity" justificationid="-990720872" parent="CHANG"/>
        <item child="PMD$ExcessiveImports" parent="CHANG"/>
        <item child="PMD$ExcessivePublicCount" parent="CHANG"/>
        <item child="PMD$ForLoopsMustUseBraces" parent="CHANG"/>
        <item child="PMD$IfElseStmtsMustUseBraces" parent="CHANG"/>
        <item child="PMD$IfStmtsMustUseBraces" parent="CHANG"/>
        <item child="PMD$LooseCoupling" justificationid="1684455800" parent="CHANG"/>
        <item child="PMD$MethodReturnsInternalArray" parent="CHANG"/>
        <item child="PMD$NcssConstructorCount" parent="CHANG"/>
        <item child="PMD$NcssMethodCount" parent="CHANG"/>
        <item child="PMD$NcssTypeCount" parent="CHANG"/>
        <item child="PMD$SimplifyBooleanExpressions" parent="CHANG"/>
        <item child="PMD$TooManyFields" parent="CHANG"/>
        <item child="PMD$WhileLoopsMustUseBraces" parent="CHANG"/>
        <item child="CONF" parent="MAINT"/>
        <item child="EncapsulationViolation" parent="CONF"/>
        <item child="UnfinishedCode" parent="CONF"/>
        <item child="CRAFT" parent="MAINT"/>
        <item child="Always%20define%20equals%20AND%20hash%20method" parent="CRAFT"/>
        <item child="FindBugs$HE_EQUALS_NO_HASHCODE" parent="Always%20define%20equals%20AND%20hash%20method"/>
        <item child="FindBugs$HE_HASHCODE_NO_EQUALS" parent="Always%20define%20equals%20AND%20hash%20method"/>
        <item child="PMD$OverrideBothEqualsAndHashcode" parent="Always%20define%20equals%20AND%20hash%20method"/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="CRAFT"/>
        <item child="Case%20statement%20should%20have%20break" parent="CRAFT"/>
        <item child="Comparing%20strings%20by%20reference" parent="CRAFT"/>
        <item child="FindBugs$ES_COMPARING_STRINGS_WITH_EQ" parent="Comparing%20strings%20by%20reference"/>
        <item child="PMD$UseEqualsToCompareStrings" parent="Comparing%20strings%20by%20reference"/>
        <item child="EncapsulationViolation" parent="CRAFT"/>
        <item child="ExcessiveMethodNumber" parent="CRAFT"/>
        <item child="ExcessiveParameterNumber" parent="CRAFT"/>
        <item child="LowCommentRatio" parent="CRAFT"/>
        <item child="Proper%20clone%20implementation" parent="CRAFT"/>
        <item child="FindBugs$CN_IDIOM_NO_SUPER_CALL" parent="Proper%20clone%20implementation"/>
        <item child="PMD$ProperCloneImplementation" parent="Proper%20clone%20implementation"/>
        <item child="Redefining%20symbols" parent="CRAFT"/>
        <item child="Too%20many%20cases%20in%20switch" parent="CRAFT"/>
        <item child="PMD$SwitchDensity" parent="Too%20many%20cases%20in%20switch"/>
        <item child="UnfinishedCode" parent="CRAFT"/>
        <item child="Unused%20private%20method" parent="CRAFT"/>
        <item child="FindBugs$BC_UNCONFIRMED_CAST" parent="CRAFT"/>
        <item child="FindBugs$CN_IDIOM" justificationid="-1964076294" parent="CRAFT"/>
        <item child="FindBugs$DC_DOUBLECHECK" parent="CRAFT"/>
        <item child="FindBugs$DM_MONITOR_WAIT_ON_CONDITION" parent="CRAFT"/>
        <item child="FindBugs$EC_BAD_ARRAY_COMPARE" justificationid="-842353121" parent="CRAFT"/>
        <item child="FindBugs$NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" parent="CRAFT"/>
        <item child="FindBugs$SE_NONFINAL_SERIALVERSIONID" parent="CRAFT"/>
        <item child="FindBugs$SE_NONSTATIC_SERIALVERSIONID" parent="CRAFT"/>
        <item child="FindBugs$WA_NOT_IN_LOOP" parent="CRAFT"/>
        <item child="PMD$AvoidConstantsInterface" parent="CRAFT"/>
        <item child="PMD$AvoidDuplicateLiterals" justificationid="2076468404" parent="CRAFT"/>
        <item child="PMD$AvoidInstanceofChecksInCatchClause" parent="CRAFT"/>
        <item child="PMD$AvoidPrintStackTrace" parent="CRAFT"/>
        <item child="PMD$AvoidThrowingRawExceptionTypes" parent="CRAFT"/>
        <item child="PMD$CallSuperInConstructor" parent="CRAFT"/>
        <item child="PMD$CloneThrowsCloneNotSupportedException" parent="CRAFT"/>
        <item child="PMD$CompareObjectsWithEquals" parent="CRAFT"/>
        <item child="PMD$DefaultPackage" parent="CRAFT"/>
        <item child="PMD$DoNotCallGarbageCollectionExplicitly" parent="CRAFT"/>
        <item child="PMD$EmptyFinalizer" justificationid="129061774" parent="CRAFT"/>
        <item child="PMD$EmptyWhileStmt" justificationid="681911234" parent="CRAFT"/>
        <item child="PMD$IntegerInstantiation" parent="CRAFT"/>
        <item child="PMD$JumbledIncrementer" parent="CRAFT"/>
        <item child="PMD$ReplaceHashtableWithMap" parent="CRAFT"/>
        <item child="PMD$ReplaceVectorWithList" parent="CRAFT"/>
        <item child="PMD$ReturnEmptyArrayRatherThanNull" parent="CRAFT"/>
        <item child="PMD$SimpleDateFormatNeedsLocale" parent="CRAFT"/>
        <item child="PMD$SystemPrintln" parent="CRAFT"/>
        <item child="PMD$TooFewBranchesForASwitchStatement" parent="CRAFT"/>
        <item child="PMD$UnusedFormalParameter" parent="CRAFT"/>
        <item child="PMD$UnusedModifier" parent="CRAFT"/>
        <item child="PMD$UseCorrectExceptionLogging" parent="CRAFT"/>
        <item child="DOCU" parent="MAINT"/>
        <item child="LowCommentRatio" parent="DOCU"/>
        <item child="PMD$EmptyFinalizer" parent="DOCU"/>
        <item child="PMD$UncommentedEmptyConstructor" parent="DOCU"/>
        <item child="PMD$UncommentedEmptyMethod" parent="DOCU"/>
        <item child="MAICO" parent="MAINT"/>
        <item child="Always%20define%20equals%20AND%20hash%20method" parent="MAICO"/>
        <item child="Case%20statement%20should%20have%20break" parent="MAICO"/>
        <item child="Class%20names%20should%20start%20with%20upper%20case" parent="MAICO"/>
        <item child="FindBugs$NM_CLASS_NAMING_CONVENTION" parent="Class%20names%20should%20start%20with%20upper%20case"/>
        <item child="PMD$ClassNamingConventions" parent="Class%20names%20should%20start%20with%20upper%20case"/>
        <item child="Comparing%20floating%20points" parent="MAICO"/>
        <item child="FindBugs$FE_FLOATING_POINT_EQUALITY" parent="Comparing%20floating%20points"/>
        <item child="Field%20names%20should%20start%20with%20lower%20case" parent="MAICO"/>
        <item child="FindBugs$NM_FIELD_NAMING_CONVENTION" parent="Field%20names%20should%20start%20with%20lower%20case"/>
        <item child="PMD$VariableNamingConventions" parent="Field%20names%20should%20start%20with%20lower%20case"/>
        <item child="Proper%20clone%20implementation" parent="MAICO"/>
        <item child="PMD$AvoidDollarSigns" justificationid="307542231" parent="MAICO"/>
        <item child="PMD$AvoidPrintStackTrace" parent="MAICO"/>
        <item child="PMD$DefaultLabelNotLastInSwitchStmt" justificationid="313337929" parent="MAICO"/>
        <item child="PMD$FinalizeShouldBeProtected" parent="MAICO"/>
        <item child="PMD$SystemPrintln" parent="MAICO"/>
        <item child="PMD$UseCorrectExceptionLogging" parent="MAICO"/>
        <item child="READ" parent="MAINT"/>
        <item child="Case%20statement%20should%20have%20break" parent="READ"/>
        <item child="Class%20names%20should%20start%20with%20upper%20case" parent="READ"/>
        <item child="Class%20too%20large" parent="READ"/>
        <item child="EncapsulationViolation" parent="READ"/>
        <item child="ExcessiveMethodNumber" parent="READ"/>
        <item child="ExcessiveParameterNumber" parent="READ"/>
        <item child="Field%20names%20should%20start%20with%20lower%20case" parent="READ"/>
        <item child="LowCommentRatio" parent="READ"/>
        <item child="Method%20names%20should%20start%20with%20lower%20case" parent="READ"/>
        <item child="FindBugs$NM_METHOD_NAMING_CONVENTION" parent="Method%20names%20should%20start%20with%20lower%20case"/>
        <item child="PMD$MethodNamingConventions" parent="Method%20names%20should%20start%20with%20lower%20case"/>
        <item child="No%20assignment%20in%20expressions" parent="READ"/>
        <item child="Redefining%20symbols" parent="READ"/>
        <item child="Too%20many%20cases%20in%20switch" parent="READ"/>
        <item child="UnfinishedCode" parent="READ"/>
        <item child="Unused%20private%20field" parent="READ"/>
        <item child="Unused%20private%20method" parent="READ"/>
        <item child="FindBugs$NM_CLASS_NOT_EXCEPTION" justificationid="611056127" parent="READ"/>
        <item child="FindBugs$NM_VERY_CONFUSING" justificationid="-395084914" parent="READ"/>
        <item child="FindBugs$NM_VERY_CONFUSING_INTENTIONAL" parent="READ"/>
        <item child="PMD$AbstractClassWithoutAbstractMethod" parent="READ"/>
        <item child="PMD$AbstractClassWithoutAnyMethod" parent="READ"/>
        <item child="PMD$AbstractNaming" justificationid="1444999152" parent="READ"/>
        <item child="PMD$AvoidFieldNameMatchingMethodName" parent="READ"/>
        <item child="PMD$AvoidFieldNameMatchingTypeName" parent="READ"/>
        <item child="PMD$AvoidInstanceofChecksInCatchClause" parent="READ"/>
        <item child="PMD$AvoidProtectedFieldInFinalClass" parent="READ"/>
        <item child="PMD$AvoidReassigningParameters" parent="READ"/>
        <item child="PMD$BooleanGetMethodName" parent="READ"/>
        <item child="PMD$ClassWithOnlyPrivateConstructorsShouldBeFinal" parent="READ"/>
        <item child="PMD$ConfusingTernary" parent="READ"/>
        <item child="PMD$DefaultLabelNotLastInSwitchStmt" justificationid="200554298" parent="READ"/>
        <item child="PMD$EmptyIfStmt" justificationid="-1167214100" parent="READ"/>
        <item child="PMD$EmptyStatementNotInLoop" parent="READ"/>
        <item child="PMD$ForLoopShouldBeWhileLoop" justificationid="-1150400626" parent="READ"/>
        <item child="PMD$ImportFromSamePackage" parent="READ"/>
        <item child="PMD$MethodWithSameNameAsEnclosingClass" parent="READ"/>
        <item child="PMD$NonStaticInitializer" parent="READ"/>
        <item child="PMD$NullAssignment" parent="READ"/>
        <item child="PMD$ShortMethodName" parent="READ"/>
        <item child="PMD$SignatureDeclareThrowsException" parent="READ"/>
        <item child="PMD$SimplifyBooleanExpressions" parent="READ"/>
        <item child="PMD$SimplifyConditional" parent="READ"/>
        <item child="PMD$UnnecessaryFinalModifier" parent="READ"/>
        <item child="PMD$UnnecessaryLocalBeforeReturn" parent="READ"/>
        <item child="PMD$UnnecessaryReturn" parent="READ"/>
        <item child="PMD$UnusedFormalParameter" parent="READ"/>
        <item child="PMD$UnusedLocalVariable" parent="READ"/>
        <item child="PMD$UnusedModifier" parent="READ"/>
        <item child="SIMPL" parent="MAINT"/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="SIMPL"/>
        <item child="Class%20too%20large" parent="SIMPL"/>
        <item child="EncapsulationViolation" parent="SIMPL"/>
        <item child="ExcessiveMethodNumber" parent="SIMPL"/>
        <item child="ExcessiveParameterNumber" parent="SIMPL"/>
        <item child="Method%20too%20long" parent="SIMPL"/>
        <item child="Redefining%20symbols" parent="SIMPL"/>
        <item child="Too%20many%20cases%20in%20switch" parent="SIMPL"/>
        <item child="PMD$AvoidDeeplyNestedIfStmts" parent="SIMPL"/>
        <item child="PMD$AvoidThrowingNullPointerException" parent="SIMPL"/>
        <item child="PMD$CouplingBetweenObjects" justificationid="568627708" parent="SIMPL"/>
        <item child="PMD$CyclomaticComplexity" justificationid="-306099803" parent="SIMPL"/>
        <item child="PMD$EmptyIfStmt" justificationid="1132597664" parent="SIMPL"/>
        <item child="PMD$EmptyStatementNotInLoop" parent="SIMPL"/>
        <item child="PMD$EmptyWhileStmt" justificationid="-1509729738" parent="SIMPL"/>
        <item child="PMD$ExcessiveImports" parent="SIMPL"/>
        <item child="PMD$ExcessivePublicCount" parent="SIMPL"/>
        <item child="PMD$NcssConstructorCount" parent="SIMPL"/>
        <item child="PMD$NcssMethodCount" parent="SIMPL"/>
        <item child="PMD$NcssTypeCount" parent="SIMPL"/>
        <item child="PMD$NullAssignment" parent="SIMPL"/>
        <item child="PMD$SimplifyBooleanExpressions" parent="SIMPL"/>
        <item child="PMD$SimplifyBooleanReturns" justificationid="-2080264386" parent="SIMPL"/>
        <item child="PMD$SingularField" parent="SIMPL"/>
        <item child="STRUC" parent="MAINT"/>
        <item child="EncapsulationViolation" parent="STRUC"/>
        <item child="ExcessiveMethodNumber" parent="STRUC"/>
        <item child="ExcessiveParameterNumber" parent="STRUC"/>
        <item child="UnfinishedCode" parent="STRUC"/>
        <item child="PMD$AbstractClassWithoutAbstractMethod" parent="STRUC"/>
        <item child="PMD$AbstractClassWithoutAnyMethod" parent="STRUC"/>
        <item child="PMD$ClassWithOnlyPrivateConstructorsShouldBeFinal" parent="STRUC"/>
        <item child="PMD$DefaultPackage" parent="STRUC"/>
        <item child="PMD$FinalizeShouldBeProtected" parent="STRUC"/>
        <item child="PMD$NcssTypeCount" parent="STRUC"/>
        <item child="PMD$TooManyFields" parent="STRUC"/>
        <item child="PMD$UseSingleton" parent="STRUC"/>
        <item child="TEST" parent="MAINT"/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="TEST"/>
        <item child="Class%20too%20large" parent="TEST"/>
        <item child="ExcessiveMethodNumber" parent="TEST"/>
        <item child="ExcessiveParameterNumber" parent="TEST"/>
        <item child="Method%20too%20long" parent="TEST"/>
        <item child="UnfinishedCode" parent="TEST"/>
        <item child="PMD$AvoidDeeplyNestedIfStmts" justificationid="-1978456458" parent="TEST"/>
        <item child="PMD$CyclomaticComplexity" justificationid="1605305163" parent="TEST"/>
        <item child="PMD$SignatureDeclareThrowsException" parent="TEST"/>
        <item child="PMD$UnusedFormalParameter" parent="TEST"/>
        <item child="PORT" parent="QM"/>
        <item child="ADAPT" parent="PORT"/>
        <item child="FindBugs$SE_NO_SERIALVERSIONID" parent="ADAPT"/>
        <item child="PMD$AvoidUsingHardCodedIP" parent="ADAPT"/>
        <item child="PMD$DoNotCallGarbageCollectionExplicitly" parent="ADAPT"/>
        <item child="PMD$DoNotCallSystemExit" parent="ADAPT"/>
        <item child="PMD$UseLocaleWithCaseConversions" parent="ADAPT"/>
        <item child="INSTA" parent="PORT"/>
        <item child="PORCO" parent="PORT"/>
        <item child="FindBugs$DM_EXIT" justificationid="1002578817" parent="PORCO"/>
        <item child="REL" parent="QM"/>
        <item child="CORR" parent="REL"/>
        <item child="Always%20define%20equals%20AND%20hash%20method" parent="CORR"/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="CORR"/>
        <item child="Case%20statement%20should%20have%20break" parent="CORR"/>
        <item child="Comparing%20floating%20points" parent="CORR"/>
        <item child="ExcessiveParameterNumber" parent="CORR"/>
        <item child="FindBugs$AM_CREATES_EMPTY_JAR_FILE_ENTRY" justificationid="1262594481" parent="CORR"/>
        <item child="FindBugs$AM_CREATES_EMPTY_ZIP_FILE_ENTRY" justificationid="1262594481" parent="CORR"/>
        <item child="FindBugs$BC_IMPOSSIBLE_CAST" justificationid="1182875413" parent="CORR"/>
        <item child="FindBugs$DB_DUPLICATE_BRANCHES" parent="CORR"/>
        <item child="FindBugs$DLS_OVERWRITTEN_INCREMENT" justificationid="-500884461" parent="CORR"/>
        <item child="FindBugs$IC_INIT_CIRCULARITY" justificationid="1191187470" parent="CORR"/>
        <item child="FindBugs$IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN" parent="CORR"/>
        <item child="FindBugs$NP_ALWAYS_NULL" justificationid="-500884461" parent="CORR"/>
        <item child="FindBugs$NP_NULL_PARAM_DEREF" justificationid="1191187470" parent="CORR"/>
        <item child="FindBugs$NP_UNWRITTEN_FIELD" parent="CORR"/>
        <item child="FindBugs$RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION" justificationid="1670412501" parent="CORR"/>
        <item child="FindBugs$RU_INVOKE_RUN" parent="CORR"/>
        <item child="FindBugs$RV_DONT_JUST_NULL_CHECK_READLINE" parent="CORR"/>
        <item child="FindBugs$RV_RETURN_VALUE_IGNORED" justificationid="1191187470" parent="CORR"/>
        <item child="FindBugs$SI_INSTANCE_BEFORE_FINALS_ASSIGNED" justificationid="1191187470" parent="CORR"/>
        <item child="FindBugs$UCF_USELESS_CONTROL_FLOW" parent="CORR"/>
        <item child="PMD$AvoidThreadGroup" parent="CORR"/>
        <item child="PMD$BadComparison" parent="CORR"/>
        <item child="PMD$CallSuperInConstructor" parent="CORR"/>
        <item child="PMD$CompareObjectsWithEquals" parent="CORR"/>
        <item child="PMD$DoubleCheckedLocking" parent="CORR"/>
        <item child="PMD$EmptyTryBlock" parent="CORR"/>
        <item child="PMD$JumbledIncrementer" parent="CORR"/>
        <item child="PMD$MisplacedNullCheck" parent="CORR"/>
        <item child="PMD$NonThreadSafeSingleton" parent="CORR"/>
        <item child="PMD$PositionLiteralsFirstInComparisons" parent="CORR"/>
        <item child="PMD$SwitchStmtsShouldHaveDefault" parent="CORR"/>
        <item child="PMD$UseLocaleWithCaseConversions" parent="CORR"/>
        <item child="PMD$UseNotifyAllInsteadOfNotify" parent="CORR"/>
        <item child="FAULT" parent="REL"/>
        <item child="Catch%20blocks%20should%20not%20be%20empty" parent="FAULT"/>
        <item child="PMD$EmptyCatchBlock" parent="Catch%20blocks%20should%20not%20be%20empty"/>
        <item child="Comparing%20floating%20points" parent="FAULT"/>
        <item child="Comparing%20strings%20by%20reference" parent="FAULT"/>
        <item child="Finalize%20does%20not%20call%20super.finalize()" parent="FAULT"/>
        <item child="FindBugs$FI_MISSING_SUPER_CALL" parent="Finalize%20does%20not%20call%20super.finalize()"/>
        <item child="PMD$FinalizeDoesNotCallSuperFinalize" parent="Finalize%20does%20not%20call%20super.finalize()"/>
        <item child="FindBugs$IMSE_DONT_CATCH_IMSE" justificationid="772993762" parent="FAULT"/>
        <item child="FindBugs$REC_CATCH_EXCEPTION" parent="FAULT"/>
        <item child="PMD$ConstructorCallsOverridableMethod" justificationid="-1668571537" parent="FAULT"/>
        <item child="PMD$ReturnEmptyArrayRatherThanNull" parent="FAULT"/>
        <item child="PMD$ReturnFromFinallyBlock" justificationid="713498784" parent="FAULT"/>
        <item child="ROB" parent="REL"/>
        <item child="FindBugs$LI_LAZY_INIT_STATIC" parent="ROB"/>
        <item child="FindBugs$NP_IMMEDIATE_DEREFERENCE_OF_READLINE" parent="ROB"/>
        <item child="FindBugs$RR_NOT_CHECKED" parent="ROB"/>
        <item child="FindBugs$SR_NOT_CHECKED" parent="ROB"/>
        <item child="PMD$AccessorClassGeneration" parent="ROB"/>
        <item child="PMD$AvoidCatchingNPE" parent="ROB"/>
        <item child="PMD$AvoidSynchronizedAtMethodLevel" parent="ROB"/>
        <item child="PMD$MethodReturnsInternalArray" parent="ROB"/>
        <item child="PMD$NonThreadSafeSingleton" parent="ROB"/>
        <item child="PMD$UseNotifyAllInsteadOfNotify" parent="ROB"/>
        <item child="RSTAB" parent="REL"/>
        <item child="PMD$AvoidCatchingThrowable" justificationid="1944159571" parent="RSTAB"/>
        <item child="PMD$ConstructorCallsOverridableMethod" justificationid="-138405719" parent="RSTAB"/>
        <item child="SOUND" parent="REL"/>
        <item child="EncapsulationViolation" parent="SOUND"/>
        <item child="Finalize%20does%20not%20call%20super.finalize()" parent="SOUND"/>
        <item child="UnfinishedCode" parent="SOUND"/>
        <item child="FindBugs$DM_EXIT" justificationid="179425173" parent="SOUND"/>
        <item child="FindBugs$DM_RUN_FINALIZERS_ON_EXIT" justificationid="1441601123" parent="SOUND"/>
        <item child="FindBugs$FI_EXPLICIT_INVOCATION" justificationid="1463669781" parent="SOUND"/>
        <item child="FindBugs$IL_CONTAINER_ADDED_TO_ITSELF" parent="SOUND"/>
        <item child="FindBugs$IL_INFINITE_RECURSIVE_LOOP" parent="SOUND"/>
        <item child="FindBugs$SW_SWING_METHODS_INVOKED_IN_SWING_THREAD" parent="SOUND"/>
        <item child="FindBugs$UL_UNRELEASED_LOCK" parent="SOUND"/>
        <item child="FindBugs$UL_UNRELEASED_LOCK_EXCEPTION_PATH" parent="SOUND"/>
        <item child="FindBugs$UW_UNCOND_WAIT" parent="SOUND"/>
        <item child="SEC" parent="QM"/>
        <item child="AVAIL" parent="SEC"/>
        <item child="COFID" parent="SEC"/>
        <item child="INTEG" parent="SEC"/>
        <item child="FindBugs$EI_EXPOSE_REP" parent="INTEG"/>
        <item child="FindBugs$MS_EXPOSE_REP" parent="INTEG"/>
        <item child="FindBugs$MS_FINAL_PKGPROTECT" parent="INTEG"/>
        <item child="FindBugs$MS_MUTABLE_ARRAY" parent="INTEG"/>
        <item child="FindBugs$MS_MUTABLE_HASHTABLE" parent="INTEG"/>
        <item child="FindBugs$MS_SHOULD_BE_FINAL" parent="INTEG"/>
        <item child="UnfinishedCode" parent="SEC"/>
        <item child="SP" justificationid="589798460" parent="QM"/>
        <item child="PP" justificationid="-447728438" parent="SP"/>
        <item child="SAE" justificationid="-447728438" parent="SP"/>
        <item child="UM" justificationid="352839176" parent="SP"/>
        <item child="TIC"/>
        <item child="1." justificationid="-1770364448" parent="TIC"/>
        <item child="1.1" justificationid="679969553" parent="1."/>
        <item child="1.1.1" parent="1.1"/>
        <item child="1.1.2" parent="1.1"/>
        <item child="Class%20names%20should%20start%20with%20upper%20case" parent="1.1.2"/>
        <item child="FindBugs$NM_CLASS_NOT_EXCEPTION" parent="1.1.2"/>
        <item child="PMD$AbstractNaming" parent="1.1.2"/>
        <item child="1.1.3" parent="1.1"/>
        <item child="Method%20names%20should%20start%20with%20lower%20case" parent="1.1.3"/>
        <item child="FindBugs$NM_VERY_CONFUSING" parent="1.1.3"/>
        <item child="FindBugs$NM_VERY_CONFUSING_INTENTIONAL" parent="1.1.3"/>
        <item child="PMD$BooleanGetMethodName" parent="1.1.3"/>
        <item child="PMD$MethodWithSameNameAsEnclosingClass" parent="1.1.3"/>
        <item child="PMD$ShortMethodName" parent="1.1.3"/>
        <item child="1.1.4" parent="1.1"/>
        <item child="Field%20names%20should%20start%20with%20lower%20case" parent="1.1.4"/>
        <item child="PMD$AvoidFieldNameMatchingMethodName" parent="1.1.4"/>
        <item child="PMD$AvoidFieldNameMatchingTypeName" parent="1.1.4"/>
        <item child="1.1.5" parent="1.1"/>
        <item child="PMD$AvoidDollarSigns" parent="1.1.5"/>
        <item child="1.2" justificationid="-37638088" parent="1."/>
        <item child="1.2.1" parent="1.2"/>
        <item child="PMD$ForLoopsMustUseBraces" parent="1.2.1"/>
        <item child="PMD$IfElseStmtsMustUseBraces" parent="1.2.1"/>
        <item child="PMD$IfStmtsMustUseBraces" parent="1.2.1"/>
        <item child="PMD$WhileLoopsMustUseBraces" parent="1.2.1"/>
        <item child="1.2.2" parent="1.2"/>
        <item child="No%20assignment%20in%20expressions" parent="1.2.2"/>
        <item child="PMD$CallSuperInConstructor" parent="1.2.2"/>
        <item child="PMD$CompareObjectsWithEquals" parent="1.2.2"/>
        <item child="PMD$DefaultPackage" parent="1.2.2"/>
        <item child="PMD$DoNotCallGarbageCollectionExplicitly" parent="1.2.2"/>
        <item child="PMD$EmptyStatementNotInLoop" parent="1.2.2"/>
        <item child="PMD$NonStaticInitializer" parent="1.2.2"/>
        <item child="PMD$ReturnEmptyArrayRatherThanNull" parent="1.2.2"/>
        <item child="PMD$SimplifyBooleanReturns" parent="1.2.2"/>
        <item child="PMD$UnnecessaryFinalModifier" parent="1.2.2"/>
        <item child="PMD$UnnecessaryReturn" parent="1.2.2"/>
        <item child="PMD$UnusedModifier" parent="1.2.2"/>
        <item child="1.2.3" parent="1.2"/>
        <item child="Always%20define%20equals%20AND%20hash%20method" parent="1.2.3"/>
        <item child="PMD$AvoidPrintStackTrace" parent="1.2.3"/>
        <item child="PMD$CloneThrowsCloneNotSupportedException" parent="1.2.3"/>
        <item child="PMD$ReplaceHashtableWithMap" parent="1.2.3"/>
        <item child="PMD$ReplaceVectorWithList" parent="1.2.3"/>
        <item child="PMD$SimpleDateFormatNeedsLocale" parent="1.2.3"/>
        <item child="PMD$SimplifyStartsWith" parent="1.2.3"/>
        <item child="PMD$SystemPrintln" parent="1.2.3"/>
        <item child="PMD$UseCollectionIsEmpty" parent="1.2.3"/>
        <item child="PMD$UseCorrectExceptionLogging" parent="1.2.3"/>
        <item child="PMD$UseLocaleWithCaseConversions" parent="1.2.3"/>
        <item child="1.2.4" parent="1.2"/>
        <item child="PMD$AvoidUsingHardCodedIP" parent="1.2.4"/>
        <item child="PMD$DoNotCallSystemExit" parent="1.2.4"/>
        <item child="1.2.5" parent="1.2"/>
        <item child="1.3" justificationid="661417969" parent="1."/>
        <item child="LowCommentRatio" parent="1.3"/>
        <item child="PMD$UncommentedEmptyConstructor" parent="1.3"/>
        <item child="PMD$UncommentedEmptyMethod" parent="1.3"/>
        <item child="2." justificationid="-1203514885" parent="TIC"/>
        <item child="2.1" parent="2."/>
        <item child="2.1.1" parent="2.1"/>
        <item child="PMD$SingularField" parent="2.1.1"/>
        <item child="2.1.2" parent="2.1"/>
        <item child="Field%20should%20be%20static" parent="2.1.2"/>
        <item child="FindBugs$MS_FINAL_PKGPROTECT" parent="2.1.2"/>
        <item child="PMD$UseSingleton" parent="2.1.2"/>
        <item child="2.1.3" parent="2.1"/>
        <item child="2.1.4" parent="2.1"/>
        <item child="PMD$AvoidUsingShortType" parent="2.1.4"/>
        <item child="2.1.5" parent="2.1"/>
        <item child="2.1.6" parent="2.1"/>
        <item child="ExcessiveParameterNumber" parent="2.1.6"/>
        <item child="PMD$AbstractClassWithoutAnyMethod" parent="2.1.6"/>
        <item child="PMD$AtLeastOneConstructor" parent="2.1.6"/>
        <item child="PMD$AvoidConstantsInterface" parent="2.1.6"/>
        <item child="PMD$AvoidProtectedFieldInFinalClass" parent="2.1.6"/>
        <item child="2.2" parent="2."/>
        <item child="2.3" parent="2."/>
        <item child="Always%20define%20equals%20AND%20hash%20method" parent="2.3"/>
        <item child="FindBugs$CN_IDIOM" justificationid="-1964076294" parent="2.3"/>
        <item child="PMD$EmptyTryBlock" parent="2.3"/>
        <item child="2.4" parent="2."/>
        <item child="2.5" parent="2."/>
        <item child="3." justificationid="-918814715" parent="TIC"/>
        <item child="3.1" parent="3."/>
        <item child="FindBugs$IL_CONTAINER_ADDED_TO_ITSELF" parent="3.1"/>
        <item child="FindBugs$IL_INFINITE_RECURSIVE_LOOP" parent="3.1"/>
        <item child="PMD$EmptyWhileStmt" parent="3.1"/>
        <item child="PMD$ForLoopShouldBeWhileLoop" parent="3.1"/>
        <item child="PMD$ForLoopsMustUseBraces" parent="3.1"/>
        <item child="PMD$JumbledIncrementer" parent="3.1"/>
        <item child="PMD$WhileLoopsMustUseBraces" parent="3.1"/>
        <item child="3.2" parent="3."/>
        <item child="Case%20statement%20should%20have%20break" parent="3.2"/>
        <item child="Too%20many%20cases%20in%20switch" parent="3.2"/>
        <item child="PMD$DefaultLabelNotLastInSwitchStmt" parent="3.2"/>
        <item child="PMD$EmptyIfStmt" parent="3.2"/>
        <item child="PMD$IfElseStmtsMustUseBraces" parent="3.2"/>
        <item child="PMD$IfStmtsMustUseBraces" parent="3.2"/>
        <item child="PMD$SwitchStmtsShouldHaveDefault" parent="3.2"/>
        <item child="3.3" parent="3."/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="3.3"/>
        <item child="Comparing%20floating%20points" parent="3.3"/>
        <item child="Comparing%20strings%20by%20reference" parent="3.3"/>
        <item child="FindBugs$DM_STRING_EMPTY_EQUALS" parent="3.3"/>
        <item child="PMD$BadComparison" parent="3.3"/>
        <item child="PMD$BooleanInversion" parent="3.3"/>
        <item child="PMD$ConfusingTernary" parent="3.3"/>
        <item child="PMD$SimplifyBooleanExpressions" parent="3.3"/>
        <item child="PMD$SimplifyConditional" parent="3.3"/>
        <item child="PMD$SwitchStmtsShouldHaveDefault" parent="3.3"/>
        <item child="PMD$TooFewBranchesForASwitchStatement" parent="3.3"/>
        <item child="3.4" parent="3."/>
        <item child="3.5" parent="3."/>
        <item child="FindBugs$DLS_OVERWRITTEN_INCREMENT" parent="3.5"/>
        <item child="3.6" parent="3."/>
        <item child="ExcessiveParameterNumber" parent="3.6"/>
        <item child="FindBugs$IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN" parent="3.6"/>
        <item child="FindBugs$RV_DONT_JUST_NULL_CHECK_READLINE" parent="3.6"/>
        <item child="FindBugs$RV_RETURN_VALUE_IGNORED" parent="3.6"/>
        <item child="PMD$AvoidReassigningParameters" parent="3.6"/>
        <item child="PMD$AvoidSynchronizedAtMethodLevel" parent="3.6"/>
        <item child="PMD$PositionLiteralsFirstInComparisons" parent="3.6"/>
        <item child="PMD$UnusedFormalParameter" parent="3.6"/>
        <item child="3.7" parent="3."/>
        <item child="3.7.1" parent="3.7"/>
        <item child="3.7.2" parent="3.7"/>
        <item child="3.7.3" parent="3.7"/>
        <item child="FindBugs$BC_IMPOSSIBLE_CAST" justificationid="1182875413" parent="3.7.3"/>
        <item child="FindBugs$BC_UNCONFIRMED_CAST" parent="3.7.3"/>
        <item child="3.8" parent="3."/>
        <item child="Case%20statement%20should%20have%20break" parent="3.8"/>
        <item child="Class%20too%20large" parent="3.8"/>
        <item child="Method%20too%20long" parent="3.8"/>
        <item child="No%20assignment%20in%20expressions" parent="3.8"/>
        <item child="Too%20many%20cases%20in%20switch" parent="3.8"/>
        <item child="PMD$AvoidDeeplyNestedIfStmts" parent="3.8"/>
        <item child="PMD$AvoidInstanceofChecksInCatchClause" parent="3.8"/>
        <item child="PMD$CyclomaticComplexity" parent="3.8"/>
        <item child="PMD$NcssMethodCount" parent="3.8"/>
        <item child="3.9" parent="3."/>
        <item child="4." justificationid="-860915999" parent="TIC"/>
        <item child="4.1" parent="4."/>
        <item child="4.2" parent="4."/>
        <item child="4.3" parent="4."/>
        <item child="PMD$AvoidUsingVolatile" parent="4.3"/>
        <item child="4.4" parent="4."/>
        <item child="4.5" parent="4."/>
        <item child="4.6" parent="4."/>
        <item child="Instantiation%20of%20java.lang.Boolean" parent="4.6"/>
        <item child="Instantiation%20of%20java.lang.String" parent="4.6"/>
        <item child="FindBugs$DM_BOXED_PRIMITIVE_TOSTRING" parent="4.6"/>
        <item child="FindBugs$DM_NEW_FOR_GETCLASS" parent="4.6"/>
        <item child="FindBugs$ISC_INSTANTIATE_STATIC_CLASS" parent="4.6"/>
        <item child="PMD$AvoidStringBufferField" parent="4.6"/>
        <item child="PMD$BigIntegerInstantiation" parent="4.6"/>
        <item child="PMD$IntegerInstantiation" parent="4.6"/>
        <item child="PMD$UnnecessaryConversionTemporary" parent="4.6"/>
        <item child="PMD$UnnecessaryLocalBeforeReturn" parent="4.6"/>
        <item child="PMD$UnnecessaryWrapperObjectCreation" parent="4.6"/>
        <item child="PMD$UnusedLocalVariable" parent="4.6"/>
        <item child="4.7" parent="4."/>
        <item child="5." justificationid="-1635658881" parent="TIC"/>
        <item child="5.1" parent="5."/>
        <item child="Catch%20blocks%20should%20not%20be%20empty" parent="5.1"/>
        <item child="FindBugs$IMSE_DONT_CATCH_IMSE" parent="5.1"/>
        <item child="FindBugs$REC_CATCH_EXCEPTION" parent="5.1"/>
        <item child="PMD$AvoidCatchingNPE" parent="5.1"/>
        <item child="PMD$AvoidCatchingThrowable" parent="5.1"/>
        <item child="PMD$AvoidThrowingNullPointerException" parent="5.1"/>
        <item child="PMD$AvoidThrowingRawExceptionTypes" parent="5.1"/>
        <item child="PMD$MisplacedNullCheck" parent="5.1"/>
        <item child="PMD$ReturnFromFinallyBlock" parent="5.1"/>
        <item child="PMD$SignatureDeclareThrowsException" parent="5.1"/>
        <item child="5.2" parent="5."/>
        <item child="5.2.1" parent="5.2"/>
        <item child="FindBugs$NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" parent="5.2.1"/>
        <item child="FindBugs$NP_UNWRITTEN_FIELD" parent="5.2.1"/>
        <item child="5.2.2" parent="5.2"/>
        <item child="5.2.3" parent="5.2"/>
        <item child="FindBugs$IC_INIT_CIRCULARITY" parent="5.2.3"/>
        <item child="FindBugs$LI_LAZY_INIT_STATIC" parent="5.2.3"/>
        <item child="FindBugs$SI_INSTANCE_BEFORE_FINALS_ASSIGNED" parent="5.2.3"/>
        <item child="5.2.4" parent="5.2"/>
        <item child="5.2.5" parent="5.2"/>
        <item child="5.3" parent="5."/>
        <item child="FindBugs$NP_IMMEDIATE_DEREFERENCE_OF_READLINE" parent="5.3"/>
        <item child="FindBugs$RR_NOT_CHECKED" parent="5.3"/>
        <item child="FindBugs$SR_NOT_CHECKED" parent="5.3"/>
        <item child="5.4" parent="5."/>
        <item child="FindBugs$DC_DOUBLECHECK" parent="5.4"/>
        <item child="FindBugs$DM_MONITOR_WAIT_ON_CONDITION" parent="5.4"/>
        <item child="FindBugs$DM_USELESS_THREAD" parent="5.4"/>
        <item child="FindBugs$ESync_EMPTY_SYNC" parent="5.4"/>
        <item child="FindBugs$NO_NOTIFY_NOT_NOTIFYALL" parent="5.4"/>
        <item child="FindBugs$RS_READOBJECT_SYNC" parent="5.4"/>
        <item child="FindBugs$SWL_SLEEP_WITH_LOCK_HELD" parent="5.4"/>
        <item child="FindBugs$UL_UNRELEASED_LOCK" parent="5.4"/>
        <item child="FindBugs$UL_UNRELEASED_LOCK_EXCEPTION_PATH" parent="5.4"/>
        <item child="FindBugs$UW_UNCOND_WAIT" parent="5.4"/>
        <item child="FindBugs$WA_NOT_IN_LOOP" parent="5.4"/>
        <item child="PMD$AvoidThreadGroup" parent="5.4"/>
        <item child="PMD$DoubleCheckedLocking" parent="5.4"/>
        <item child="5.5" parent="5."/>
        <item child="FindBugs$DM_EXIT" parent="5.5"/>
        <item child="FindBugs$DM_RUN_FINALIZERS_ON_EXIT" justificationid="1441601123" parent="5.5"/>
        <item child="FindBugs$FI_EXPLICIT_INVOCATION" parent="5.5"/>
        <item child="FindBugs$ODR_OPEN_DATABASE_RESOURCE" justificationid="-1387457857" parent="5.5"/>
        <item child="FindBugs$ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH" parent="5.5"/>
        <item child="FindBugs$OS_OPEN_STREAM" justificationid="-1387457857" parent="5.5"/>
        <item child="FindBugs$OS_OPEN_STREAM_EXCEPTION_PATH" justificationid="-1387457857" parent="5.5"/>
        <item child="5.6" parent="5."/>
        <item child="5.7" parent="5."/>
        <item child="6." justificationid="2025719444" parent="TIC"/>
        <item child="6.1" parent="6."/>
        <item child="6.1.1" parent="6.1"/>
        <item child="6.1.2" parent="6.1"/>
        <item child="Finalize%20does%20not%20call%20super.finalize()" parent="6.1.2"/>
        <item child="PMD$AccessorClassGeneration" parent="6.1.2"/>
        <item child="PMD$ConstructorCallsOverridableMethod" parent="6.1.2"/>
        <item child="PMD$EmptyFinalizer" parent="6.1.2"/>
        <item child="PMD$FinalizeShouldBeProtected" parent="6.1.2"/>
        <item child="PMD$NcssConstructorCount" parent="6.1.2"/>
        <item child="6.1.3" parent="6.1"/>
        <item child="Redefining%20symbols" parent="6.1.3"/>
        <item child="PMD$AbstractClassWithoutAbstractMethod" parent="6.1.3"/>
        <item child="6.1.4" parent="6.1"/>
        <item child="EncapsulationViolation" parent="6.1.4"/>
        <item child="FindBugs$EI_EXPOSE_REP" parent="6.1.4"/>
        <item child="FindBugs$MS_EXPOSE_REP" parent="6.1.4"/>
        <item child="FindBugs$MS_FINAL_PKGPROTECT" parent="6.1.4"/>
        <item child="FindBugs$MS_MUTABLE_ARRAY" parent="6.1.4"/>
        <item child="FindBugs$MS_MUTABLE_HASHTABLE" parent="6.1.4"/>
        <item child="FindBugs$MS_SHOULD_BE_FINAL" parent="6.1.4"/>
        <item child="PMD$ClassWithOnlyPrivateConstructorsShouldBeFinal" parent="6.1.4"/>
        <item child="PMD$MethodReturnsInternalArray" parent="6.1.4"/>
        <item child="6.1.5" parent="6.1"/>
        <item child="6.1.5.1" parent="6.1.5"/>
        <item child="6.1.5.2" parent="6.1.5"/>
        <item child="6.1.5.3" parent="6.1.5"/>
        <item child="6.1.5.4" parent="6.1.5"/>
        <item child="6.1.5.5" parent="6.1.5"/>
        <item child="6.1.6" parent="6.1"/>
        <item child="Class%20too%20large" parent="6.1.6"/>
        <item child="PMD$ExcessiveImports" parent="6.1.6"/>
        <item child="PMD$ExcessivePublicCount" parent="6.1.6"/>
        <item child="PMD$NcssTypeCount" parent="6.1.6"/>
        <item child="PMD$TooManyFields" parent="6.1.6"/>
        <item child="6.2" parent="6."/>
        <item child="ExcessiveMethodNumber" parent="6.2"/>
        <item child="PMD$CouplingBetweenObjects" parent="6.2"/>
        <item child="PMD$LooseCoupling" parent="6.2"/>
        <item child="6.3" parent="6."/>
        <item child="7." justificationid="-777184646" parent="TIC"/>
        <item child="7.1" parent="7."/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="7.1"/>
        <item child="Comparing%20floating%20points" parent="7.1"/>
        <item child="Comparing%20strings%20by%20reference" parent="7.1"/>
        <item child="FindBugs$EC_BAD_ARRAY_COMPARE" parent="7.1"/>
        <item child="FindBugs$NP_NULL_PARAM_DEREF" parent="7.1"/>
        <item child="FindBugs$RU_INVOKE_RUN" parent="7.1"/>
        <item child="FindBugs$UCF_USELESS_CONTROL_FLOW" justificationid="1191187470" parent="7.1"/>
        <item child="7.2" parent="7."/>
        <item child="Always%20same%20result%20for%20boolean%20expression" parent="7.2"/>
        <item child="UnfinishedCode" parent="7.2"/>
        <item child="FindBugs$NP_ALWAYS_NULL" justificationid="-500884461" parent="7.2"/>
        <item child="7.3" parent="7."/>
        <item child="7.4" parent="7."/>
        <item child="Unused%20private%20field" parent="7.4"/>
        <item child="Unused%20private%20method" parent="7.4"/>
        <item child="FindBugs$URF_UNREAD_FIELD" parent="7.4"/>
        <item child="7.5" parent="7."/>
        <item child="FindBugs$DB_DUPLICATE_BRANCHES" parent="7.5"/>
        <item child="PMD$AvoidDuplicateLiterals" parent="7.5"/>
        <item child="7.6" parent="7."/>
        <item child="PMD$ImportFromSamePackage" parent="7.6"/>
        <item child="8." justificationid="1802552039" parent="TIC"/>
        <item child="8.1" justificationid="1520667698" parent="8."/>
        <item child="FindBugs$DM_GC" parent="8.1"/>
        <item child="FindBugs$SBSC_USE_STRINGBUFFER_CONCATENATION" parent="8.1"/>
        <item child="PMD$AddEmptyString" parent="8.1"/>
        <item child="PMD$AppendCharacterWithChar" parent="8.1"/>
        <item child="PMD$AvoidArrayLoops" parent="8.1"/>
        <item child="PMD$AvoidInstantiatingObjectsInLoops" parent="8.1"/>
        <item child="PMD$AvoidUsingShortType" parent="8.1"/>
        <item child="PMD$AvoidUsingVolatile" parent="8.1"/>
        <item child="PMD$BooleanInversion" parent="8.1"/>
        <item child="PMD$ConsecutiveLiteralAppends" parent="8.1"/>
        <item child="PMD$InefficientEmptyStringCheck" parent="8.1"/>
        <item child="PMD$InefficientStringBuffering" parent="8.1"/>
        <item child="PMD$InsufficientStringBufferDeclaration" parent="8.1"/>
        <item child="PMD$OptimizableToArrayCall" parent="8.1"/>
        <item child="PMD$SimplifyStartsWith" parent="8.1"/>
        <item child="PMD$UseArraysAsList" parent="8.1"/>
        <item child="PMD$UseIndexOfChar" parent="8.1"/>
        <item child="PMD$UselessStringValueOf" parent="8.1"/>
        <item child="8.2" justificationid="-858267321" parent="8."/>
        <item child="PMD$AvoidSynchronizedAtMethodLevel" parent="8.2"/>
        <item child="PMD$AvoidThreadGroup" parent="8.2"/>
        <item child="PMD$DoubleCheckedLocking" parent="8.2"/>
        <item child="PMD$NonThreadSafeSingleton" parent="8.2"/>
        <item child="PMD$UseNotifyAllInsteadOfNotify" parent="8.2"/>
        <item child="9." justificationid="96290665" parent="TIC"/>
        <item child="9.1" parent="9."/>
        <item child="9.1.1" parent="9.1"/>
        <item child="9.1.2" parent="9.1"/>
        <item child="9.1.3" parent="9.1"/>
        <item child="Proper%20clone%20implementation" parent="9.1.3"/>
        <item child="FindBugs$AM_CREATES_EMPTY_JAR_FILE_ENTRY" parent="9.1.3"/>
        <item child="FindBugs$AM_CREATES_EMPTY_ZIP_FILE_ENTRY" parent="9.1.3"/>
        <item child="FindBugs$DM_STRING_TOSTRING" parent="9.1.3"/>
        <item child="FindBugs$RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION" parent="9.1.3"/>
        <item child="FindBugs$SE_NONFINAL_SERIALVERSIONID" parent="9.1.3"/>
        <item child="FindBugs$SE_NONSTATIC_SERIALVERSIONID" parent="9.1.3"/>
        <item child="FindBugs$SE_NO_SERIALVERSIONID" parent="9.1.3"/>
        <item child="FindBugs$SW_SWING_METHODS_INVOKED_IN_SWING_THREAD" parent="9.1.3"/>
        <item child="9.2" parent="9."/>
        <item child="9.3" parent="9."/>
        <item child="9.3.1" parent="9.3"/>
        <item child="9.3.2" parent="9.3"/>
        <item child="9.4" parent="9."/>
        <item child="9.4.1" parent="9.4"/>
        <item child="9.4.2" justificationid="975684155" parent="9.4"/>
        <item child="Too%20many%20cases%20in%20switch" parent="9.4.2"/>
        <item child="PMD$NullAssignment" parent="9.4.2"/>
        <item child="9.4.3" justificationid="-447728438" parent="9.4"/>
        <item child="9.4.4" justificationid="-447728438" parent="9.4"/>
        <item child="9.5.4" justificationid="336159016" parent="9.4"/>
    </qualityhierarchy>
    <relations>
        <relation description="-956344054">
            <item name="1.1"/>
            <item name="READ"/>
        </relation>
        <relation description="-956344054">
            <item name="1.1"/>
            <item name="SIMPL"/>
        </relation>
        <relation description="-956344054">
            <item name="1.2"/>
            <item name="CHANG"/>
        </relation>
        <relation description="-956344054">
            <item name="1.2"/>
            <item name="PORCO"/>
        </relation>
        <relation description="-956344054">
            <item name="1.2"/>
            <item name="READ"/>
        </relation>
        <relation description="140038687">
            <item name="1.2.1"/>
            <item name="READ"/>
        </relation>
        <relation description="-956344054">
            <item name="1.3"/>
            <item name="DOCU"/>
        </relation>
        <relation description="-956344054">
            <item name="1.3"/>
            <item name="READ"/>
        </relation>
        <relation description="-1310256143">
            <item name="9.4.3"/>
            <item name="PP"/>
        </relation>
        <relation description="-1310256143">
            <item name="9.4.4"/>
            <item name="SAE"/>
        </relation>
        <relation description="-277638589">
            <item name="9.5.4"/>
            <item name="UM"/>
        </relation>
    </relations>
</qualitymodel>
